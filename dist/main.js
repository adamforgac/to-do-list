(()=>{"use strict";var e={105:(e,t,n)=>{function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function a(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function o(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function i(e){o(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===r(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function s(e,t){o(2,arguments);var n=i(e),r=a(t);return isNaN(r)?new Date(NaN):r?(n.setDate(n.getDate()+r),n):n}function l(e,t){o(2,arguments);var n=i(e),r=a(t);if(isNaN(r))return new Date(NaN);if(!r)return n;var s=n.getDate(),l=new Date(n.getTime());return l.setMonth(n.getMonth()+r+1,0),s>=l.getDate()?l:(n.setFullYear(l.getFullYear(),l.getMonth(),s),n)}function c(e,t){if(o(2,arguments),!t||"object"!==r(t))return new Date(NaN);var n=t.years?a(t.years):0,c=t.months?a(t.months):0,u=t.weeks?a(t.weeks):0,d=t.days?a(t.days):0,m=t.hours?a(t.hours):0,f=t.minutes?a(t.minutes):0,v=t.seconds?a(t.seconds):0,h=i(e),p=c||n?l(h,c+12*n):h,y=d||u?s(p,d+7*u):p,g=1e3*(v+60*(f+60*m));return new Date(y.getTime()+g)}function u(e){o(1,arguments);var t=i(e).getDay();return 0===t||6===t}function d(e){return o(1,arguments),0===i(e).getDay()}function m(e){return o(1,arguments),6===i(e).getDay()}function f(e,t){o(2,arguments);var n=i(e),r=u(n),s=a(t);if(isNaN(s))return new Date(NaN);var l=n.getHours(),c=s<0?-1:1,f=a(s/5);n.setDate(n.getDate()+7*f);for(var v=Math.abs(s%5);v>0;)n.setDate(n.getDate()+c),u(n)||(v-=1);return r&&u(n)&&0!==s&&(m(n)&&n.setDate(n.getDate()+(c<0?2:-1)),d(n)&&n.setDate(n.getDate()+(c<0?1:-2))),n.setHours(l),n}function v(e,t){o(2,arguments);var n=i(e).getTime(),r=a(t);return new Date(n+r)}n.r(t),n.d(t,{add:()=>c,addBusinessDays:()=>f,addDays:()=>s,addHours:()=>p,addISOWeekYears:()=>E,addMilliseconds:()=>v,addMinutes:()=>N,addMonths:()=>l,addQuarters:()=>O,addSeconds:()=>A,addWeeks:()=>Y,addYears:()=>I,areIntervalsOverlapping:()=>j,clamp:()=>F,closestIndexTo:()=>W,closestTo:()=>P,compareAsc:()=>R,compareDesc:()=>Q,daysInWeek:()=>B,daysInYear:()=>X,daysToWeeks:()=>le,differenceInBusinessDays:()=>me,differenceInCalendarDays:()=>L,differenceInCalendarISOWeekYears:()=>fe,differenceInCalendarISOWeeks:()=>he,differenceInCalendarMonths:()=>pe,differenceInCalendarQuarters:()=>ge,differenceInCalendarWeeks:()=>ke,differenceInCalendarYears:()=>Se,differenceInDays:()=>Te,differenceInHours:()=>De,differenceInISOWeekYears:()=>Me,differenceInMilliseconds:()=>Ce,differenceInMinutes:()=>Ne,differenceInMonths:()=>Ie,differenceInQuarters:()=>je,differenceInSeconds:()=>He,differenceInWeeks:()=>Ue,differenceInYears:()=>Fe,eachDayOfInterval:()=>We,eachHourOfInterval:()=>Pe,eachMinuteOfInterval:()=>Qe,eachMonthOfInterval:()=>Be,eachQuarterOfInterval:()=>$e,eachWeekOfInterval:()=>Je,eachWeekendOfInterval:()=>ze,eachWeekendOfMonth:()=>_e,eachWeekendOfYear:()=>Ke,eachYearOfInterval:()=>et,endOfDay:()=>Oe,endOfDecade:()=>tt,endOfHour:()=>nt,endOfISOWeek:()=>at,endOfISOWeekYear:()=>ot,endOfMinute:()=>it,endOfMonth:()=>Ae,endOfQuarter:()=>st,endOfSecond:()=>lt,endOfToday:()=>ct,endOfTomorrow:()=>ut,endOfWeek:()=>rt,endOfYear:()=>Ve,endOfYesterday:()=>dt,format:()=>zt,formatDistance:()=>tn,formatDistanceStrict:()=>sn,formatDistanceToNow:()=>ln,formatDistanceToNowStrict:()=>cn,formatDuration:()=>dn,formatISO:()=>mn,formatISO9075:()=>fn,formatISODuration:()=>vn,formatRFC3339:()=>hn,formatRFC7231:()=>gn,formatRelative:()=>wn,fromUnixTime:()=>kn,getDate:()=>Sn,getDay:()=>bn,getDayOfYear:()=>Tn,getDaysInMonth:()=>Cn,getDaysInYear:()=>xn,getDecade:()=>Ln,getDefaultOptions:()=>Dn,getHours:()=>En,getISODay:()=>Mn,getISOWeek:()=>On,getISOWeekYear:()=>b,getISOWeeksInYear:()=>Yn,getMilliseconds:()=>In,getMinutes:()=>jn,getMonth:()=>Hn,getOverlappingDaysInIntervals:()=>Fn,getQuarter:()=>ye,getSeconds:()=>Wn,getTime:()=>Pn,getUnixTime:()=>Rn,getWeek:()=>$n,getWeekOfMonth:()=>Jn,getWeekYear:()=>Qn,getWeeksInMonth:()=>Gn,getYear:()=>_n,hoursToMilliseconds:()=>Vn,hoursToMinutes:()=>Zn,hoursToSeconds:()=>Kn,intervalToDuration:()=>er,intlFormat:()=>tr,intlFormatDistance:()=>nr,isAfter:()=>rr,isBefore:()=>ar,isDate:()=>ue,isEqual:()=>or,isExists:()=>ir,isFirstDayOfMonth:()=>sr,isFriday:()=>lr,isFuture:()=>cr,isLastDayOfMonth:()=>Ye,isLeapYear:()=>qn,isMatch:()=>Ea,isMonday:()=>Ma,isPast:()=>Na,isSameDay:()=>ce,isSameHour:()=>Aa,isSameISOWeek:()=>Ia,isSameISOWeekYear:()=>ja,isSameMinute:()=>Ha,isSameMonth:()=>Ua,isSameQuarter:()=>Fa,isSameSecond:()=>Pa,isSameWeek:()=>Ya,isSameYear:()=>Ra,isSaturday:()=>m,isSunday:()=>d,isThisHour:()=>Qa,isThisISOWeek:()=>Ba,isThisMinute:()=>Xa,isThisMonth:()=>$a,isThisQuarter:()=>Ja,isThisSecond:()=>za,isThisWeek:()=>Ga,isThisYear:()=>_a,isThursday:()=>Va,isToday:()=>Za,isTomorrow:()=>Ka,isTuesday:()=>eo,isValid:()=>de,isWednesday:()=>to,isWeekend:()=>u,isWithinInterval:()=>no,isYesterday:()=>ao,lastDayOfDecade:()=>oo,lastDayOfISOWeek:()=>so,lastDayOfISOWeekYear:()=>lo,lastDayOfMonth:()=>zn,lastDayOfQuarter:()=>co,lastDayOfWeek:()=>io,lastDayOfYear:()=>uo,lightFormat:()=>po,max:()=>H,maxTime:()=>$,milliseconds:()=>go,millisecondsInHour:()=>z,millisecondsInMinute:()=>J,millisecondsInSecond:()=>G,millisecondsToHours:()=>wo,millisecondsToMinutes:()=>ko,millisecondsToSeconds:()=>So,min:()=>U,minTime:()=>_,minutesInHour:()=>V,minutesToHours:()=>bo,minutesToMilliseconds:()=>To,minutesToSeconds:()=>Co,monthsInQuarter:()=>Z,monthsInYear:()=>K,monthsToQuarters:()=>qo,monthsToYears:()=>xo,nextDay:()=>Lo,nextFriday:()=>Do,nextMonday:()=>Eo,nextSaturday:()=>Mo,nextSunday:()=>No,nextThursday:()=>Oo,nextTuesday:()=>Ao,nextWednesday:()=>Yo,parse:()=>Da,parseISO:()=>Io,parseJSON:()=>Bo,previousDay:()=>Xo,previousFriday:()=>$o,previousMonday:()=>Jo,previousSaturday:()=>zo,previousSunday:()=>Go,previousThursday:()=>_o,previousTuesday:()=>Vo,previousWednesday:()=>Zo,quartersInYear:()=>ee,quartersToMonths:()=>Ko,quartersToYears:()=>ei,roundToNearestMinutes:()=>ti,secondsInDay:()=>re,secondsInHour:()=>te,secondsInMinute:()=>ne,secondsInMonth:()=>ie,secondsInQuarter:()=>se,secondsInWeek:()=>ae,secondsInYear:()=>oe,secondsToHours:()=>ni,secondsToMilliseconds:()=>ri,secondsToMinutes:()=>ai,set:()=>ii,setDate:()=>si,setDay:()=>li,setDayOfYear:()=>ci,setDefaultOptions:()=>ui,setHours:()=>di,setISODay:()=>mi,setISOWeek:()=>fi,setISOWeekYear:()=>D,setMilliseconds:()=>vi,setMinutes:()=>hi,setMonth:()=>oi,setQuarter:()=>pi,setSeconds:()=>yi,setWeek:()=>gi,setWeekYear:()=>wi,setYear:()=>ki,startOfDay:()=>q,startOfDecade:()=>Si,startOfHour:()=>Oa,startOfISOWeek:()=>S,startOfISOWeekYear:()=>T,startOfMinute:()=>Re,startOfMonth:()=>Ge,startOfQuarter:()=>Xe,startOfSecond:()=>Wa,startOfToday:()=>bi,startOfTomorrow:()=>Ti,startOfWeek:()=>k,startOfWeekYear:()=>Bn,startOfYear:()=>Ze,startOfYesterday:()=>Ci,sub:()=>xi,subBusinessDays:()=>Li,subDays:()=>ro,subHours:()=>Di,subISOWeekYears:()=>Ee,subMilliseconds:()=>mt,subMinutes:()=>Ei,subMonths:()=>qi,subQuarters:()=>Mi,subSeconds:()=>Ni,subWeeks:()=>Oi,subYears:()=>Ai,toDate:()=>i,weeksToDays:()=>Yi,yearsToMonths:()=>Ii,yearsToQuarters:()=>ji});var h=36e5;function p(e,t){return o(2,arguments),v(e,a(t)*h)}var y={};function g(){return y}function w(e){y=e}function k(e,t){var n,r,s,l,c,u,d,m;o(1,arguments);var f=g(),v=a(null!==(n=null!==(r=null!==(s=null!==(l=null==t?void 0:t.weekStartsOn)&&void 0!==l?l:null==t||null===(c=t.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==s?s:f.weekStartsOn)&&void 0!==r?r:null===(d=f.locale)||void 0===d||null===(m=d.options)||void 0===m?void 0:m.weekStartsOn)&&void 0!==n?n:0);if(!(v>=0&&v<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var h=i(e),p=h.getDay(),y=(p<v?7:0)+p-v;return h.setDate(h.getDate()-y),h.setHours(0,0,0,0),h}function S(e){return o(1,arguments),k(e,{weekStartsOn:1})}function b(e){o(1,arguments);var t=i(e),n=t.getFullYear(),r=new Date(0);r.setFullYear(n+1,0,4),r.setHours(0,0,0,0);var a=S(r),s=new Date(0);s.setFullYear(n,0,4),s.setHours(0,0,0,0);var l=S(s);return t.getTime()>=a.getTime()?n+1:t.getTime()>=l.getTime()?n:n-1}function T(e){o(1,arguments);var t=b(e),n=new Date(0);return n.setFullYear(t,0,4),n.setHours(0,0,0,0),S(n)}function C(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}function q(e){o(1,arguments);var t=i(e);return t.setHours(0,0,0,0),t}var x=864e5;function L(e,t){o(2,arguments);var n=q(e),r=q(t),a=n.getTime()-C(n),i=r.getTime()-C(r);return Math.round((a-i)/x)}function D(e,t){o(2,arguments);var n=i(e),r=a(t),s=L(n,T(n)),l=new Date(0);return l.setFullYear(r,0,4),l.setHours(0,0,0,0),(n=T(l)).setDate(n.getDate()+s),n}function E(e,t){o(2,arguments);var n=a(t);return D(e,b(e)+n)}var M=6e4;function N(e,t){return o(2,arguments),v(e,a(t)*M)}function O(e,t){return o(2,arguments),l(e,3*a(t))}function A(e,t){return o(2,arguments),v(e,1e3*a(t))}function Y(e,t){return o(2,arguments),s(e,7*a(t))}function I(e,t){return o(2,arguments),l(e,12*a(t))}function j(e,t,n){o(2,arguments);var r=i(null==e?void 0:e.start).getTime(),a=i(null==e?void 0:e.end).getTime(),s=i(null==t?void 0:t.start).getTime(),l=i(null==t?void 0:t.end).getTime();if(!(r<=a&&s<=l))throw new RangeError("Invalid interval");return null!=n&&n.inclusive?r<=l&&s<=a:r<l&&s<a}function H(e){var t,n;if(o(1,arguments),e&&"function"==typeof e.forEach)t=e;else{if("object"!==r(e)||null===e)return new Date(NaN);t=Array.prototype.slice.call(e)}return t.forEach((function(e){var t=i(e);(void 0===n||n<t||isNaN(Number(t)))&&(n=t)})),n||new Date(NaN)}function U(e){var t,n;if(o(1,arguments),e&&"function"==typeof e.forEach)t=e;else{if("object"!==r(e)||null===e)return new Date(NaN);t=Array.prototype.slice.call(e)}return t.forEach((function(e){var t=i(e);(void 0===n||n>t||isNaN(t.getDate()))&&(n=t)})),n||new Date(NaN)}function F(e,t){var n=t.start,r=t.end;return o(2,arguments),U([H([e,n]),r])}function W(e,t){o(2,arguments);var n=i(e);if(isNaN(Number(n)))return NaN;var r,a,s=n.getTime();return(null==t?[]:"function"==typeof t.forEach?t:Array.prototype.slice.call(t)).forEach((function(e,t){var n=i(e);if(isNaN(Number(n)))return r=NaN,void(a=NaN);var o=Math.abs(s-n.getTime());(null==r||o<Number(a))&&(r=t,a=o)})),r}function P(e,t){o(2,arguments);var n=i(e);if(isNaN(Number(n)))return new Date(NaN);var r,a,s=n.getTime();return(null==t?[]:"function"==typeof t.forEach?t:Array.prototype.slice.call(t)).forEach((function(e){var t=i(e);if(isNaN(Number(t)))return r=new Date(NaN),void(a=NaN);var n=Math.abs(s-t.getTime());(null==r||n<Number(a))&&(r=t,a=n)})),r}function R(e,t){o(2,arguments);var n=i(e),r=i(t),a=n.getTime()-r.getTime();return a<0?-1:a>0?1:a}function Q(e,t){o(2,arguments);var n=i(e),r=i(t),a=n.getTime()-r.getTime();return a>0?-1:a<0?1:a}var B=7,X=365.2425,$=24*Math.pow(10,8)*60*60*1e3,J=6e4,z=36e5,G=1e3,_=-$,V=60,Z=3,K=12,ee=4,te=3600,ne=60,re=24*te,ae=7*re,oe=re*X,ie=oe/12,se=3*ie;function le(e){o(1,arguments);var t=e/B;return Math.floor(t)}function ce(e,t){o(2,arguments);var n=q(e),r=q(t);return n.getTime()===r.getTime()}function ue(e){return o(1,arguments),e instanceof Date||"object"===r(e)&&"[object Date]"===Object.prototype.toString.call(e)}function de(e){if(o(1,arguments),!ue(e)&&"number"!=typeof e)return!1;var t=i(e);return!isNaN(Number(t))}function me(e,t){o(2,arguments);var n=i(e),r=i(t);if(!de(n)||!de(r))return NaN;var l=L(n,r),c=l<0?-1:1,d=a(l/7),m=5*d;for(r=s(r,7*d);!ce(n,r);)m+=u(r)?0:c,r=s(r,c);return 0===m?0:m}function fe(e,t){return o(2,arguments),b(e)-b(t)}var ve=6048e5;function he(e,t){o(2,arguments);var n=S(e),r=S(t),a=n.getTime()-C(n),i=r.getTime()-C(r);return Math.round((a-i)/ve)}function pe(e,t){o(2,arguments);var n=i(e),r=i(t);return 12*(n.getFullYear()-r.getFullYear())+(n.getMonth()-r.getMonth())}function ye(e){o(1,arguments);var t=i(e);return Math.floor(t.getMonth()/3)+1}function ge(e,t){o(2,arguments);var n=i(e),r=i(t);return 4*(n.getFullYear()-r.getFullYear())+(ye(n)-ye(r))}var we=6048e5;function ke(e,t,n){o(2,arguments);var r=k(e,n),a=k(t,n),i=r.getTime()-C(r),s=a.getTime()-C(a);return Math.round((i-s)/we)}function Se(e,t){o(2,arguments);var n=i(e),r=i(t);return n.getFullYear()-r.getFullYear()}function be(e,t){var n=e.getFullYear()-t.getFullYear()||e.getMonth()-t.getMonth()||e.getDate()-t.getDate()||e.getHours()-t.getHours()||e.getMinutes()-t.getMinutes()||e.getSeconds()-t.getSeconds()||e.getMilliseconds()-t.getMilliseconds();return n<0?-1:n>0?1:n}function Te(e,t){o(2,arguments);var n=i(e),r=i(t),a=be(n,r),s=Math.abs(L(n,r));n.setDate(n.getDate()-a*s);var l=a*(s-Number(be(n,r)===-a));return 0===l?0:l}function Ce(e,t){return o(2,arguments),i(e).getTime()-i(t).getTime()}var qe={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(e){return e<0?Math.ceil(e):Math.floor(e)}},xe="trunc";function Le(e){return e?qe[e]:qe[xe]}function De(e,t,n){o(2,arguments);var r=Ce(e,t)/z;return Le(null==n?void 0:n.roundingMethod)(r)}function Ee(e,t){return o(2,arguments),E(e,-a(t))}function Me(e,t){o(2,arguments);var n=i(e),r=i(t),a=R(n,r),s=Math.abs(fe(n,r));n=Ee(n,a*s);var l=a*(s-Number(R(n,r)===-a));return 0===l?0:l}function Ne(e,t,n){o(2,arguments);var r=Ce(e,t)/J;return Le(null==n?void 0:n.roundingMethod)(r)}function Oe(e){o(1,arguments);var t=i(e);return t.setHours(23,59,59,999),t}function Ae(e){o(1,arguments);var t=i(e),n=t.getMonth();return t.setFullYear(t.getFullYear(),n+1,0),t.setHours(23,59,59,999),t}function Ye(e){o(1,arguments);var t=i(e);return Oe(t).getTime()===Ae(t).getTime()}function Ie(e,t){o(2,arguments);var n,r=i(e),a=i(t),s=R(r,a),l=Math.abs(pe(r,a));if(l<1)n=0;else{1===r.getMonth()&&r.getDate()>27&&r.setDate(30),r.setMonth(r.getMonth()-s*l);var c=R(r,a)===-s;Ye(i(e))&&1===l&&1===R(e,a)&&(c=!1),n=s*(l-Number(c))}return 0===n?0:n}function je(e,t,n){o(2,arguments);var r=Ie(e,t)/3;return Le(null==n?void 0:n.roundingMethod)(r)}function He(e,t,n){o(2,arguments);var r=Ce(e,t)/1e3;return Le(null==n?void 0:n.roundingMethod)(r)}function Ue(e,t,n){o(2,arguments);var r=Te(e,t)/7;return Le(null==n?void 0:n.roundingMethod)(r)}function Fe(e,t){o(2,arguments);var n=i(e),r=i(t),a=R(n,r),s=Math.abs(Se(n,r));n.setFullYear(1584),r.setFullYear(1584);var l=R(n,r)===-a,c=a*(s-Number(l));return 0===c?0:c}function We(e,t){var n;o(1,arguments);var r=e||{},a=i(r.start),s=i(r.end).getTime();if(!(a.getTime()<=s))throw new RangeError("Invalid interval");var l=[],c=a;c.setHours(0,0,0,0);var u=Number(null!==(n=null==t?void 0:t.step)&&void 0!==n?n:1);if(u<1||isNaN(u))throw new RangeError("`options.step` must be a number greater than 1");for(;c.getTime()<=s;)l.push(i(c)),c.setDate(c.getDate()+u),c.setHours(0,0,0,0);return l}function Pe(e,t){var n;o(1,arguments);var r=e||{},a=i(r.start),s=i(r.end),l=a.getTime(),c=s.getTime();if(!(l<=c))throw new RangeError("Invalid interval");var u=[],d=a;d.setMinutes(0,0,0);var m=Number(null!==(n=null==t?void 0:t.step)&&void 0!==n?n:1);if(m<1||isNaN(m))throw new RangeError("`options.step` must be a number greater than 1");for(;d.getTime()<=c;)u.push(i(d)),d=p(d,m);return u}function Re(e){o(1,arguments);var t=i(e);return t.setSeconds(0,0),t}function Qe(e,t){var n;o(1,arguments);var r=Re(i(e.start)),a=i(e.end),s=r.getTime(),l=a.getTime();if(s>=l)throw new RangeError("Invalid interval");var c=[],u=r,d=Number(null!==(n=null==t?void 0:t.step)&&void 0!==n?n:1);if(d<1||isNaN(d))throw new RangeError("`options.step` must be a number equal to or greater than 1");for(;u.getTime()<=l;)c.push(i(u)),u=N(u,d);return c}function Be(e){o(1,arguments);var t=e||{},n=i(t.start),r=i(t.end).getTime(),a=[];if(!(n.getTime()<=r))throw new RangeError("Invalid interval");var s=n;for(s.setHours(0,0,0,0),s.setDate(1);s.getTime()<=r;)a.push(i(s)),s.setMonth(s.getMonth()+1);return a}function Xe(e){o(1,arguments);var t=i(e),n=t.getMonth(),r=n-n%3;return t.setMonth(r,1),t.setHours(0,0,0,0),t}function $e(e){o(1,arguments);var t=e||{},n=i(t.start),r=i(t.end),a=r.getTime();if(!(n.getTime()<=a))throw new RangeError("Invalid interval");var s=Xe(n);a=Xe(r).getTime();for(var l=[],c=s;c.getTime()<=a;)l.push(i(c)),c=O(c,1);return l}function Je(e,t){o(1,arguments);var n=e||{},r=i(n.start),a=i(n.end),s=a.getTime();if(!(r.getTime()<=s))throw new RangeError("Invalid interval");var l=k(r,t),c=k(a,t);l.setHours(15),c.setHours(15),s=c.getTime();for(var u=[],d=l;d.getTime()<=s;)d.setHours(0),u.push(i(d)),(d=Y(d,1)).setHours(15);return u}function ze(e){o(1,arguments);for(var t=We(e),n=[],r=0;r<t.length;){var a=t[r++];u(a)&&(n.push(a),d(a)&&(r+=5))}return n}function Ge(e){o(1,arguments);var t=i(e);return t.setDate(1),t.setHours(0,0,0,0),t}function _e(e){o(1,arguments);var t=Ge(e);if(isNaN(t.getTime()))throw new RangeError("The passed date is invalid");return ze({start:t,end:Ae(e)})}function Ve(e){o(1,arguments);var t=i(e),n=t.getFullYear();return t.setFullYear(n+1,0,0),t.setHours(23,59,59,999),t}function Ze(e){o(1,arguments);var t=i(e),n=new Date(0);return n.setFullYear(t.getFullYear(),0,1),n.setHours(0,0,0,0),n}function Ke(e){return o(1,arguments),ze({start:Ze(e),end:Ve(e)})}function et(e){o(1,arguments);var t=e||{},n=i(t.start),r=i(t.end).getTime();if(!(n.getTime()<=r))throw new RangeError("Invalid interval");var a=[],s=n;for(s.setHours(0,0,0,0),s.setMonth(0,1);s.getTime()<=r;)a.push(i(s)),s.setFullYear(s.getFullYear()+1);return a}function tt(e){o(1,arguments);var t=i(e),n=t.getFullYear(),r=9+10*Math.floor(n/10);return t.setFullYear(r,11,31),t.setHours(23,59,59,999),t}function nt(e){o(1,arguments);var t=i(e);return t.setMinutes(59,59,999),t}function rt(e,t){var n,r,s,l,c,u,d,m;o(1,arguments);var f=g(),v=a(null!==(n=null!==(r=null!==(s=null!==(l=null==t?void 0:t.weekStartsOn)&&void 0!==l?l:null==t||null===(c=t.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==s?s:f.weekStartsOn)&&void 0!==r?r:null===(d=f.locale)||void 0===d||null===(m=d.options)||void 0===m?void 0:m.weekStartsOn)&&void 0!==n?n:0);if(!(v>=0&&v<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var h=i(e),p=h.getDay(),y=6+(p<v?-7:0)-(p-v);return h.setDate(h.getDate()+y),h.setHours(23,59,59,999),h}function at(e){return o(1,arguments),rt(e,{weekStartsOn:1})}function ot(e){o(1,arguments);var t=b(e),n=new Date(0);n.setFullYear(t+1,0,4),n.setHours(0,0,0,0);var r=S(n);return r.setMilliseconds(r.getMilliseconds()-1),r}function it(e){o(1,arguments);var t=i(e);return t.setSeconds(59,999),t}function st(e){o(1,arguments);var t=i(e),n=t.getMonth(),r=n-n%3+3;return t.setMonth(r,0),t.setHours(23,59,59,999),t}function lt(e){o(1,arguments);var t=i(e);return t.setMilliseconds(999),t}function ct(){return Oe(Date.now())}function ut(){var e=new Date,t=e.getFullYear(),n=e.getMonth(),r=e.getDate(),a=new Date(0);return a.setFullYear(t,n,r+1),a.setHours(23,59,59,999),a}function dt(){var e=new Date,t=e.getFullYear(),n=e.getMonth(),r=e.getDate(),a=new Date(0);return a.setFullYear(t,n,r-1),a.setHours(23,59,59,999),a}function mt(e,t){return o(2,arguments),v(e,-a(t))}function ft(e){o(1,arguments);var t=i(e),n=t.getUTCDay(),r=(n<1?7:0)+n-1;return t.setUTCDate(t.getUTCDate()-r),t.setUTCHours(0,0,0,0),t}function vt(e){o(1,arguments);var t=i(e),n=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=ft(r),s=new Date(0);s.setUTCFullYear(n,0,4),s.setUTCHours(0,0,0,0);var l=ft(s);return t.getTime()>=a.getTime()?n+1:t.getTime()>=l.getTime()?n:n-1}function ht(e){o(1,arguments);var t=i(e),n=ft(t).getTime()-function(e){o(1,arguments);var t=vt(e),n=new Date(0);return n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0),ft(n)}(t).getTime();return Math.round(n/6048e5)+1}function pt(e,t){var n,r,s,l,c,u,d,m;o(1,arguments);var f=g(),v=a(null!==(n=null!==(r=null!==(s=null!==(l=null==t?void 0:t.weekStartsOn)&&void 0!==l?l:null==t||null===(c=t.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==s?s:f.weekStartsOn)&&void 0!==r?r:null===(d=f.locale)||void 0===d||null===(m=d.options)||void 0===m?void 0:m.weekStartsOn)&&void 0!==n?n:0);if(!(v>=0&&v<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var h=i(e),p=h.getUTCDay(),y=(p<v?7:0)+p-v;return h.setUTCDate(h.getUTCDate()-y),h.setUTCHours(0,0,0,0),h}function yt(e,t){var n,r,s,l,c,u,d,m;o(1,arguments);var f=i(e),v=f.getUTCFullYear(),h=g(),p=a(null!==(n=null!==(r=null!==(s=null!==(l=null==t?void 0:t.firstWeekContainsDate)&&void 0!==l?l:null==t||null===(c=t.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==s?s:h.firstWeekContainsDate)&&void 0!==r?r:null===(d=h.locale)||void 0===d||null===(m=d.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==n?n:1);if(!(p>=1&&p<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var y=new Date(0);y.setUTCFullYear(v+1,0,p),y.setUTCHours(0,0,0,0);var w=pt(y,t),k=new Date(0);k.setUTCFullYear(v,0,p),k.setUTCHours(0,0,0,0);var S=pt(k,t);return f.getTime()>=w.getTime()?v+1:f.getTime()>=S.getTime()?v:v-1}function gt(e,t){o(1,arguments);var n=i(e),r=pt(n,t).getTime()-function(e,t){var n,r,i,s,l,c,u,d;o(1,arguments);var m=g(),f=a(null!==(n=null!==(r=null!==(i=null!==(s=null==t?void 0:t.firstWeekContainsDate)&&void 0!==s?s:null==t||null===(l=t.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==i?i:m.firstWeekContainsDate)&&void 0!==r?r:null===(u=m.locale)||void 0===u||null===(d=u.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==n?n:1),v=yt(e,t),h=new Date(0);return h.setUTCFullYear(v,0,f),h.setUTCHours(0,0,0,0),pt(h,t)}(n,t).getTime();return Math.round(r/6048e5)+1}function wt(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}var kt={y:function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return wt("yy"===t?r%100:r,t.length)},M:function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):wt(n+1,2)},d:function(e,t){return wt(e.getUTCDate(),t.length)},a:function(e,t){var n=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:function(e,t){return wt(e.getUTCHours()%12||12,t.length)},H:function(e,t){return wt(e.getUTCHours(),t.length)},m:function(e,t){return wt(e.getUTCMinutes(),t.length)},s:function(e,t){return wt(e.getUTCSeconds(),t.length)},S:function(e,t){var n=t.length,r=e.getUTCMilliseconds();return wt(Math.floor(r*Math.pow(10,n-3)),t.length)}};const St=kt;function bt(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=t||"";return n+String(a)+i+wt(o,2)}function Tt(e,t){return e%60==0?(e>0?"-":"+")+wt(Math.abs(e)/60,2):Ct(e,t)}function Ct(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+wt(Math.floor(a/60),2)+n+wt(a%60,2)}const qt={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return St.y(e,t)},Y:function(e,t,n,r){var a=yt(e,r),o=a>0?a:1-a;return"YY"===t?wt(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):wt(o,t.length)},R:function(e,t){return wt(vt(e),t.length)},u:function(e,t){return wt(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return wt(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return wt(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return St.M(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return wt(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){var a=gt(e,r);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):wt(a,t.length)},I:function(e,t,n){var r=ht(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):wt(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):St.d(e,t)},D:function(e,t,n){var r=function(e){o(1,arguments);var t=i(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=n-t.getTime();return Math.floor(r/864e5)+1}(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):wt(r,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return wt(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return wt(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return wt(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return St.h(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):St.H(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):wt(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):wt(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):St.m(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):St.s(e,t)},S:function(e,t){return St.S(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return Tt(a);case"XXXX":case"XX":return Ct(a);default:return Ct(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return Tt(a);case"xxxx":case"xx":return Ct(a);default:return Ct(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+bt(a,":");default:return"GMT"+Ct(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+bt(a,":");default:return"GMT"+Ct(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return wt(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return wt((r._originalDate||e).getTime(),t.length)}};var xt=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},Lt=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},Dt={p:Lt,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return xt(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",xt(a,t)).replace("{{time}}",Lt(o,t))}};const Et=Dt;var Mt=["D","DD"],Nt=["YY","YYYY"];function Ot(e){return-1!==Mt.indexOf(e)}function At(e){return-1!==Nt.indexOf(e)}function Yt(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var It={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function jt(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}var Ht,Ut={date:jt({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:jt({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:jt({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},Ft={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Wt(e){return function(t,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var a=e.defaultFormattingWidth||e.defaultWidth,o=null!=n&&n.width?String(n.width):a;r=e.formattingValues[o]||e.formattingValues[a]}else{var i=e.defaultWidth,s=null!=n&&n.width?String(n.width):e.defaultWidth;r=e.values[s]||e.values[i]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function Pt(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],o=t.match(a);if(!o)return null;var i,s=o[0],l=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(l)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(s))return n}(l):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(s))return n}(l);return i=e.valueCallback?e.valueCallback(c):c,{value:i=n.valueCallback?n.valueCallback(i):i,rest:t.slice(s.length)}}}const Rt={code:"en-US",formatDistance:function(e,t,n){var r,a=It[e];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:Ut,formatRelative:function(e,t,n,r){return Ft[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:Wt({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Wt({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:Wt({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Wt({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Wt({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(Ht={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(Ht.matchPattern);if(!n)return null;var r=n[0],a=e.match(Ht.parsePattern);if(!a)return null;var o=Ht.valueCallback?Ht.valueCallback(a[0]):a[0];return{value:o=t.valueCallback?t.valueCallback(o):o,rest:e.slice(r.length)}}),era:Pt({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Pt({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:Pt({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Pt({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Pt({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var Qt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Bt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Xt=/^'([^]*?)'?$/,$t=/''/g,Jt=/[a-zA-Z]/;function zt(e,t,n){var r,s,l,c,u,d,m,f,v,h,p,y,w,k,S,b,T,q;o(2,arguments);var x=String(t),L=g(),D=null!==(r=null!==(s=null==n?void 0:n.locale)&&void 0!==s?s:L.locale)&&void 0!==r?r:Rt,E=a(null!==(l=null!==(c=null!==(u=null!==(d=null==n?void 0:n.firstWeekContainsDate)&&void 0!==d?d:null==n||null===(m=n.locale)||void 0===m||null===(f=m.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==u?u:L.firstWeekContainsDate)&&void 0!==c?c:null===(v=L.locale)||void 0===v||null===(h=v.options)||void 0===h?void 0:h.firstWeekContainsDate)&&void 0!==l?l:1);if(!(E>=1&&E<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var M=a(null!==(p=null!==(y=null!==(w=null!==(k=null==n?void 0:n.weekStartsOn)&&void 0!==k?k:null==n||null===(S=n.locale)||void 0===S||null===(b=S.options)||void 0===b?void 0:b.weekStartsOn)&&void 0!==w?w:L.weekStartsOn)&&void 0!==y?y:null===(T=L.locale)||void 0===T||null===(q=T.options)||void 0===q?void 0:q.weekStartsOn)&&void 0!==p?p:0);if(!(M>=0&&M<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!D.localize)throw new RangeError("locale must contain localize property");if(!D.formatLong)throw new RangeError("locale must contain formatLong property");var N=i(e);if(!de(N))throw new RangeError("Invalid time value");var O=mt(N,C(N)),A={firstWeekContainsDate:E,weekStartsOn:M,locale:D,_originalDate:N};return x.match(Bt).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,Et[t])(e,D.formatLong):e})).join("").match(Qt).map((function(r){if("''"===r)return"'";var a,o,i=r[0];if("'"===i)return(o=(a=r).match(Xt))?o[1].replace($t,"'"):a;var s=qt[i];if(s)return null!=n&&n.useAdditionalWeekYearTokens||!At(r)||Yt(r,t,String(e)),null!=n&&n.useAdditionalDayOfYearTokens||!Ot(r)||Yt(r,t,String(e)),s(O,r,D.localize,A);if(i.match(Jt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return r})).join("")}function Gt(e,t){if(null==e)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}function _t(e){return Gt({},e)}var Vt=1440,Zt=2520,Kt=43200,en=86400;function tn(e,t,n){var r,a;o(2,arguments);var s=g(),l=null!==(r=null!==(a=null==n?void 0:n.locale)&&void 0!==a?a:s.locale)&&void 0!==r?r:Rt;if(!l.formatDistance)throw new RangeError("locale must contain formatDistance property");var c=R(e,t);if(isNaN(c))throw new RangeError("Invalid time value");var u,d,m=Gt(_t(n),{addSuffix:Boolean(null==n?void 0:n.addSuffix),comparison:c});c>0?(u=i(t),d=i(e)):(u=i(e),d=i(t));var f,v=He(d,u),h=(C(d)-C(u))/1e3,p=Math.round((v-h)/60);if(p<2)return null!=n&&n.includeSeconds?v<5?l.formatDistance("lessThanXSeconds",5,m):v<10?l.formatDistance("lessThanXSeconds",10,m):v<20?l.formatDistance("lessThanXSeconds",20,m):v<40?l.formatDistance("halfAMinute",0,m):v<60?l.formatDistance("lessThanXMinutes",1,m):l.formatDistance("xMinutes",1,m):0===p?l.formatDistance("lessThanXMinutes",1,m):l.formatDistance("xMinutes",p,m);if(p<45)return l.formatDistance("xMinutes",p,m);if(p<90)return l.formatDistance("aboutXHours",1,m);if(p<Vt){var y=Math.round(p/60);return l.formatDistance("aboutXHours",y,m)}if(p<Zt)return l.formatDistance("xDays",1,m);if(p<Kt){var w=Math.round(p/Vt);return l.formatDistance("xDays",w,m)}if(p<en)return f=Math.round(p/Kt),l.formatDistance("aboutXMonths",f,m);if((f=Ie(d,u))<12){var k=Math.round(p/Kt);return l.formatDistance("xMonths",k,m)}var S=f%12,b=Math.floor(f/12);return S<3?l.formatDistance("aboutXYears",b,m):S<9?l.formatDistance("overXYears",b,m):l.formatDistance("almostXYears",b+1,m)}var nn=6e4,rn=1440,an=30*rn,on=365*rn;function sn(e,t,n){var r,a,s;o(2,arguments);var l=g(),c=null!==(r=null!==(a=null==n?void 0:n.locale)&&void 0!==a?a:l.locale)&&void 0!==r?r:Rt;if(!c.formatDistance)throw new RangeError("locale must contain localize.formatDistance property");var u=R(e,t);if(isNaN(u))throw new RangeError("Invalid time value");var d,m,f=Gt(_t(n),{addSuffix:Boolean(null==n?void 0:n.addSuffix),comparison:u});u>0?(d=i(t),m=i(e)):(d=i(e),m=i(t));var v,h=String(null!==(s=null==n?void 0:n.roundingMethod)&&void 0!==s?s:"round");if("floor"===h)v=Math.floor;else if("ceil"===h)v=Math.ceil;else{if("round"!==h)throw new RangeError("roundingMethod must be 'floor', 'ceil' or 'round'");v=Math.round}var p,y=m.getTime()-d.getTime(),w=y/nn,k=(y-(C(m)-C(d)))/nn,S=null==n?void 0:n.unit;if("second"===(p=S?String(S):w<1?"second":w<60?"minute":w<rn?"hour":k<an?"day":k<on?"month":"year")){var b=v(y/1e3);return c.formatDistance("xSeconds",b,f)}if("minute"===p){var T=v(w);return c.formatDistance("xMinutes",T,f)}if("hour"===p){var q=v(w/60);return c.formatDistance("xHours",q,f)}if("day"===p){var x=v(k/rn);return c.formatDistance("xDays",x,f)}if("month"===p){var L=v(k/an);return 12===L&&"month"!==S?c.formatDistance("xYears",1,f):c.formatDistance("xMonths",L,f)}if("year"===p){var D=v(k/on);return c.formatDistance("xYears",D,f)}throw new RangeError("unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'")}function ln(e,t){return o(1,arguments),tn(e,Date.now(),t)}function cn(e,t){return o(1,arguments),sn(e,Date.now(),t)}var un=["years","months","weeks","days","hours","minutes","seconds"];function dn(e,t){var n,r,a,o,i;if(arguments.length<1)throw new TypeError("1 argument required, but only ".concat(arguments.length," present"));var s=g(),l=null!==(n=null!==(r=null==t?void 0:t.locale)&&void 0!==r?r:s.locale)&&void 0!==n?n:Rt,c=null!==(a=null==t?void 0:t.format)&&void 0!==a?a:un,u=null!==(o=null==t?void 0:t.zero)&&void 0!==o&&o,d=null!==(i=null==t?void 0:t.delimiter)&&void 0!==i?i:" ";return l.formatDistance?c.reduce((function(t,n){var r="x".concat(n.replace(/(^.)/,(function(e){return e.toUpperCase()}))),a=e[n];return"number"==typeof a&&(u||e[n])?t.concat(l.formatDistance(r,a)):t}),[]).join(d):""}function mn(e,t){var n,r;o(1,arguments);var a=i(e);if(isNaN(a.getTime()))throw new RangeError("Invalid time value");var s=String(null!==(n=null==t?void 0:t.format)&&void 0!==n?n:"extended"),l=String(null!==(r=null==t?void 0:t.representation)&&void 0!==r?r:"complete");if("extended"!==s&&"basic"!==s)throw new RangeError("format must be 'extended' or 'basic'");if("date"!==l&&"time"!==l&&"complete"!==l)throw new RangeError("representation must be 'date', 'time', or 'complete'");var c="",u="",d="extended"===s?"-":"",m="extended"===s?":":"";if("time"!==l){var f=wt(a.getDate(),2),v=wt(a.getMonth()+1,2),h=wt(a.getFullYear(),4);c="".concat(h).concat(d).concat(v).concat(d).concat(f)}if("date"!==l){var p=a.getTimezoneOffset();if(0!==p){var y=Math.abs(p),g=wt(Math.floor(y/60),2),w=wt(y%60,2);u="".concat(p<0?"+":"-").concat(g,":").concat(w)}else u="Z";var k=""===c?"":"T",S=[wt(a.getHours(),2),wt(a.getMinutes(),2),wt(a.getSeconds(),2)].join(m);c="".concat(c).concat(k).concat(S).concat(u)}return c}function fn(e,t){var n,r;if(arguments.length<1)throw new TypeError("1 argument required, but only ".concat(arguments.length," present"));var a=i(e);if(!de(a))throw new RangeError("Invalid time value");var o=String(null!==(n=null==t?void 0:t.format)&&void 0!==n?n:"extended"),s=String(null!==(r=null==t?void 0:t.representation)&&void 0!==r?r:"complete");if("extended"!==o&&"basic"!==o)throw new RangeError("format must be 'extended' or 'basic'");if("date"!==s&&"time"!==s&&"complete"!==s)throw new RangeError("representation must be 'date', 'time', or 'complete'");var l="",c="extended"===o?"-":"",u="extended"===o?":":"";if("time"!==s){var d=wt(a.getDate(),2),m=wt(a.getMonth()+1,2),f=wt(a.getFullYear(),4);l="".concat(f).concat(c).concat(m).concat(c).concat(d)}if("date"!==s){var v=wt(a.getHours(),2),h=wt(a.getMinutes(),2),p=wt(a.getSeconds(),2),y=""===l?"":" ";l="".concat(l).concat(y).concat(v).concat(u).concat(h).concat(u).concat(p)}return l}function vn(e){if(o(1,arguments),"object"!==r(e))throw new Error("Duration must be an object");var t=e.years,n=void 0===t?0:t,a=e.months,i=void 0===a?0:a,s=e.days,l=void 0===s?0:s,c=e.hours,u=void 0===c?0:c,d=e.minutes,m=void 0===d?0:d,f=e.seconds,v=void 0===f?0:f;return"P".concat(n,"Y").concat(i,"M").concat(l,"DT").concat(u,"H").concat(m,"M").concat(v,"S")}function hn(e,t){var n;if(arguments.length<1)throw new TypeError("1 arguments required, but only ".concat(arguments.length," present"));var r=i(e);if(!de(r))throw new RangeError("Invalid time value");var o=Number(null!==(n=null==t?void 0:t.fractionDigits)&&void 0!==n?n:0);if(!(o>=0&&o<=3))throw new RangeError("fractionDigits must be between 0 and 3 inclusively");var s=wt(r.getDate(),2),l=wt(r.getMonth()+1,2),c=r.getFullYear(),u=wt(r.getHours(),2),d=wt(r.getMinutes(),2),m=wt(r.getSeconds(),2),f="";if(o>0){var v=r.getMilliseconds();f="."+wt(Math.floor(v*Math.pow(10,o-3)),o)}var h="",p=r.getTimezoneOffset();if(0!==p){var y=Math.abs(p),g=wt(a(y/60),2),w=wt(y%60,2);h="".concat(p<0?"+":"-").concat(g,":").concat(w)}else h="Z";return"".concat(c,"-").concat(l,"-").concat(s,"T").concat(u,":").concat(d,":").concat(m).concat(f).concat(h)}var pn=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],yn=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function gn(e){if(arguments.length<1)throw new TypeError("1 arguments required, but only ".concat(arguments.length," present"));var t=i(e);if(!de(t))throw new RangeError("Invalid time value");var n=pn[t.getUTCDay()],r=wt(t.getUTCDate(),2),a=yn[t.getUTCMonth()],o=t.getUTCFullYear(),s=wt(t.getUTCHours(),2),l=wt(t.getUTCMinutes(),2),c=wt(t.getUTCSeconds(),2);return"".concat(n,", ").concat(r," ").concat(a," ").concat(o," ").concat(s,":").concat(l,":").concat(c," GMT")}function wn(e,t,n){var r,s,l,c,u,d,m,f,v,h;o(2,arguments);var p=i(e),y=i(t),w=g(),k=null!==(r=null!==(s=null==n?void 0:n.locale)&&void 0!==s?s:w.locale)&&void 0!==r?r:Rt,S=a(null!==(l=null!==(c=null!==(u=null!==(d=null==n?void 0:n.weekStartsOn)&&void 0!==d?d:null==n||null===(m=n.locale)||void 0===m||null===(f=m.options)||void 0===f?void 0:f.weekStartsOn)&&void 0!==u?u:w.weekStartsOn)&&void 0!==c?c:null===(v=w.locale)||void 0===v||null===(h=v.options)||void 0===h?void 0:h.weekStartsOn)&&void 0!==l?l:0);if(!k.localize)throw new RangeError("locale must contain localize property");if(!k.formatLong)throw new RangeError("locale must contain formatLong property");if(!k.formatRelative)throw new RangeError("locale must contain formatRelative property");var b,T=L(p,y);if(isNaN(T))throw new RangeError("Invalid time value");b=T<-6?"other":T<-1?"lastWeek":T<0?"yesterday":T<1?"today":T<2?"tomorrow":T<7?"nextWeek":"other";var q=mt(p,C(p)),x=mt(y,C(y));return zt(p,k.formatRelative(b,q,x,{locale:k,weekStartsOn:S}),{locale:k,weekStartsOn:S})}function kn(e){return o(1,arguments),i(1e3*a(e))}function Sn(e){return o(1,arguments),i(e).getDate()}function bn(e){return o(1,arguments),i(e).getDay()}function Tn(e){o(1,arguments);var t=i(e);return L(t,Ze(t))+1}function Cn(e){o(1,arguments);var t=i(e),n=t.getFullYear(),r=t.getMonth(),a=new Date(0);return a.setFullYear(n,r+1,0),a.setHours(0,0,0,0),a.getDate()}function qn(e){o(1,arguments);var t=i(e).getFullYear();return t%400==0||t%4==0&&t%100!=0}function xn(e){o(1,arguments);var t=i(e);return"Invalid Date"===String(new Date(t))?NaN:qn(t)?366:365}function Ln(e){o(1,arguments);var t=i(e).getFullYear();return 10*Math.floor(t/10)}function Dn(){return Gt({},g())}function En(e){return o(1,arguments),i(e).getHours()}function Mn(e){o(1,arguments);var t=i(e).getDay();return 0===t&&(t=7),t}var Nn=6048e5;function On(e){o(1,arguments);var t=i(e),n=S(t).getTime()-T(t).getTime();return Math.round(n/Nn)+1}var An=6048e5;function Yn(e){o(1,arguments);var t=T(e),n=T(Y(t,60)).valueOf()-t.valueOf();return Math.round(n/An)}function In(e){return o(1,arguments),i(e).getMilliseconds()}function jn(e){return o(1,arguments),i(e).getMinutes()}function Hn(e){return o(1,arguments),i(e).getMonth()}var Un=864e5;function Fn(e,t){o(2,arguments);var n=e||{},r=t||{},a=i(n.start).getTime(),s=i(n.end).getTime(),l=i(r.start).getTime(),c=i(r.end).getTime();if(!(a<=s&&l<=c))throw new RangeError("Invalid interval");if(!(a<c&&l<s))return 0;var u=(c>s?s:c)-(l<a?a:l);return Math.ceil(u/Un)}function Wn(e){return o(1,arguments),i(e).getSeconds()}function Pn(e){return o(1,arguments),i(e).getTime()}function Rn(e){return o(1,arguments),Math.floor(Pn(e)/1e3)}function Qn(e,t){var n,r,s,l,c,u,d,m;o(1,arguments);var f=i(e),v=f.getFullYear(),h=g(),p=a(null!==(n=null!==(r=null!==(s=null!==(l=null==t?void 0:t.firstWeekContainsDate)&&void 0!==l?l:null==t||null===(c=t.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==s?s:h.firstWeekContainsDate)&&void 0!==r?r:null===(d=h.locale)||void 0===d||null===(m=d.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==n?n:1);if(!(p>=1&&p<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var y=new Date(0);y.setFullYear(v+1,0,p),y.setHours(0,0,0,0);var w=k(y,t),S=new Date(0);S.setFullYear(v,0,p),S.setHours(0,0,0,0);var b=k(S,t);return f.getTime()>=w.getTime()?v+1:f.getTime()>=b.getTime()?v:v-1}function Bn(e,t){var n,r,i,s,l,c,u,d;o(1,arguments);var m=g(),f=a(null!==(n=null!==(r=null!==(i=null!==(s=null==t?void 0:t.firstWeekContainsDate)&&void 0!==s?s:null==t||null===(l=t.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==i?i:m.firstWeekContainsDate)&&void 0!==r?r:null===(u=m.locale)||void 0===u||null===(d=u.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==n?n:1),v=Qn(e,t),h=new Date(0);return h.setFullYear(v,0,f),h.setHours(0,0,0,0),k(h,t)}var Xn=6048e5;function $n(e,t){o(1,arguments);var n=i(e),r=k(n,t).getTime()-Bn(n,t).getTime();return Math.round(r/Xn)+1}function Jn(e,t){var n,r,i,s,l,c,u,d;o(1,arguments);var m=g(),f=a(null!==(n=null!==(r=null!==(i=null!==(s=null==t?void 0:t.weekStartsOn)&&void 0!==s?s:null==t||null===(l=t.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==i?i:m.weekStartsOn)&&void 0!==r?r:null===(u=m.locale)||void 0===u||null===(d=u.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==n?n:0);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var v=Sn(e);if(isNaN(v))return NaN;var h=f-bn(Ge(e));h<=0&&(h+=7);var p=v-h;return Math.ceil(p/7)+1}function zn(e){o(1,arguments);var t=i(e),n=t.getMonth();return t.setFullYear(t.getFullYear(),n+1,0),t.setHours(0,0,0,0),t}function Gn(e,t){return o(1,arguments),ke(zn(e),Ge(e),t)+1}function _n(e){return o(1,arguments),i(e).getFullYear()}function Vn(e){return o(1,arguments),Math.floor(e*z)}function Zn(e){return o(1,arguments),Math.floor(e*V)}function Kn(e){return o(1,arguments),Math.floor(e*te)}function er(e){o(1,arguments);var t=i(e.start),n=i(e.end);if(isNaN(t.getTime()))throw new RangeError("Start Date is invalid");if(isNaN(n.getTime()))throw new RangeError("End Date is invalid");var r={};r.years=Math.abs(Fe(n,t));var a=R(n,t),s=c(t,{years:a*r.years});r.months=Math.abs(Ie(n,s));var l=c(s,{months:a*r.months});r.days=Math.abs(Te(n,l));var u=c(l,{days:a*r.days});r.hours=Math.abs(De(n,u));var d=c(u,{hours:a*r.hours});r.minutes=Math.abs(Ne(n,d));var m=c(d,{minutes:a*r.minutes});return r.seconds=Math.abs(He(n,m)),r}function tr(e,t,n){var r,a,i;return o(1,arguments),void 0===(i=t)||"locale"in i?n=t:a=t,new Intl.DateTimeFormat(null===(r=n)||void 0===r?void 0:r.locale,a).format(e)}function nr(e,t,n){o(2,arguments);var r,a=0,s=i(e),l=i(t);if(null!=n&&n.unit)"second"===(r=null==n?void 0:n.unit)?a=He(s,l):"minute"===r?a=Ne(s,l):"hour"===r?a=De(s,l):"day"===r?a=L(s,l):"week"===r?a=ke(s,l):"month"===r?a=pe(s,l):"quarter"===r?a=ge(s,l):"year"===r&&(a=Se(s,l));else{var c=He(s,l);Math.abs(c)<ne?(a=He(s,l),r="second"):Math.abs(c)<te?(a=Ne(s,l),r="minute"):Math.abs(c)<re&&Math.abs(L(s,l))<1?(a=De(s,l),r="hour"):Math.abs(c)<ae&&(a=L(s,l))&&Math.abs(a)<7?r="day":Math.abs(c)<ie?(a=ke(s,l),r="week"):Math.abs(c)<se?(a=pe(s,l),r="month"):Math.abs(c)<oe&&ge(s,l)<4?(a=ge(s,l),r="quarter"):(a=Se(s,l),r="year")}return new Intl.RelativeTimeFormat(null==n?void 0:n.locale,{localeMatcher:null==n?void 0:n.localeMatcher,numeric:(null==n?void 0:n.numeric)||"auto",style:null==n?void 0:n.style}).format(a,r)}function rr(e,t){o(2,arguments);var n=i(e),r=i(t);return n.getTime()>r.getTime()}function ar(e,t){o(2,arguments);var n=i(e),r=i(t);return n.getTime()<r.getTime()}function or(e,t){o(2,arguments);var n=i(e),r=i(t);return n.getTime()===r.getTime()}function ir(e,t,n){if(arguments.length<3)throw new TypeError("3 argument required, but only "+arguments.length+" present");var r=new Date(e,t,n);return r.getFullYear()===e&&r.getMonth()===t&&r.getDate()===n}function sr(e){return o(1,arguments),1===i(e).getDate()}function lr(e){return o(1,arguments),5===i(e).getDay()}function cr(e){return o(1,arguments),i(e).getTime()>Date.now()}function ur(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function dr(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return ur(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ur(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function mr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function fr(e,t){return fr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},fr(e,t)}function vr(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&fr(e,t)}function hr(e){return hr=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},hr(e)}function pr(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,a=hr(e);if(t){var o=hr(this).constructor;n=Reflect.construct(a,arguments,o)}else n=a.apply(this,arguments);return function(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return mr(e)}(this,n)}}function yr(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function gr(e){var t=function(e,t){if("object"!==r(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var a=n.call(e,"string");if("object"!==r(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===r(t)?t:String(t)}function wr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,gr(r.key),r)}}function kr(e,t,n){return t&&wr(e.prototype,t),n&&wr(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function Sr(e,t,n){return(t=gr(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var br=function(){function e(){yr(this,e),Sr(this,"priority",void 0),Sr(this,"subPriority",0)}return kr(e,[{key:"validate",value:function(e,t){return!0}}]),e}(),Tr=function(e){vr(n,e);var t=pr(n);function n(e,r,a,o,i){var s;return yr(this,n),(s=t.call(this)).value=e,s.validateValue=r,s.setValue=a,s.priority=o,i&&(s.subPriority=i),s}return kr(n,[{key:"validate",value:function(e,t){return this.validateValue(e,this.value,t)}},{key:"set",value:function(e,t,n){return this.setValue(e,t,this.value,n)}}]),n}(br),Cr=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",10),Sr(mr(e),"subPriority",-1),e}return kr(n,[{key:"set",value:function(e,t){if(t.timestampIsSet)return e;var n=new Date(0);return n.setFullYear(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()),n.setHours(e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds(),e.getUTCMilliseconds()),n}}]),n}(br),qr=function(){function e(){yr(this,e),Sr(this,"incompatibleTokens",void 0),Sr(this,"priority",void 0),Sr(this,"subPriority",void 0)}return kr(e,[{key:"run",value:function(e,t,n,r){var a=this.parse(e,t,n,r);return a?{setter:new Tr(a.value,this.validate,this.set,this.priority,this.subPriority),rest:a.rest}:null}},{key:"validate",value:function(e,t,n){return!0}}]),e}(),xr=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",140),Sr(mr(e),"incompatibleTokens",["R","u","t","T"]),e}return kr(n,[{key:"parse",value:function(e,t,n){switch(t){case"G":case"GG":case"GGG":return n.era(e,{width:"abbreviated"})||n.era(e,{width:"narrow"});case"GGGGG":return n.era(e,{width:"narrow"});default:return n.era(e,{width:"wide"})||n.era(e,{width:"abbreviated"})||n.era(e,{width:"narrow"})}}},{key:"set",value:function(e,t,n){return t.era=n,e.setUTCFullYear(n,0,1),e.setUTCHours(0,0,0,0),e}}]),n}(qr),Lr={month:/^(1[0-2]|0?\d)/,date:/^(3[0-1]|[0-2]?\d)/,dayOfYear:/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,week:/^(5[0-3]|[0-4]?\d)/,hour23h:/^(2[0-3]|[0-1]?\d)/,hour24h:/^(2[0-4]|[0-1]?\d)/,hour11h:/^(1[0-1]|0?\d)/,hour12h:/^(1[0-2]|0?\d)/,minute:/^[0-5]?\d/,second:/^[0-5]?\d/,singleDigit:/^\d/,twoDigits:/^\d{1,2}/,threeDigits:/^\d{1,3}/,fourDigits:/^\d{1,4}/,anyDigitsSigned:/^-?\d+/,singleDigitSigned:/^-?\d/,twoDigitsSigned:/^-?\d{1,2}/,threeDigitsSigned:/^-?\d{1,3}/,fourDigitsSigned:/^-?\d{1,4}/},Dr=/^([+-])(\d{2})(\d{2})?|Z/,Er=/^([+-])(\d{2})(\d{2})|Z/,Mr=/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,Nr=/^([+-])(\d{2}):(\d{2})|Z/,Or=/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/;function Ar(e,t){return e?{value:t(e.value),rest:e.rest}:e}function Yr(e,t){var n=t.match(e);return n?{value:parseInt(n[0],10),rest:t.slice(n[0].length)}:null}function Ir(e,t){var n=t.match(e);if(!n)return null;if("Z"===n[0])return{value:0,rest:t.slice(1)};var r="+"===n[1]?1:-1,a=n[2]?parseInt(n[2],10):0,o=n[3]?parseInt(n[3],10):0,i=n[5]?parseInt(n[5],10):0;return{value:r*(a*z+o*J+i*G),rest:t.slice(n[0].length)}}function jr(e){return Yr(Lr.anyDigitsSigned,e)}function Hr(e,t){switch(e){case 1:return Yr(Lr.singleDigit,t);case 2:return Yr(Lr.twoDigits,t);case 3:return Yr(Lr.threeDigits,t);case 4:return Yr(Lr.fourDigits,t);default:return Yr(new RegExp("^\\d{1,"+e+"}"),t)}}function Ur(e,t){switch(e){case 1:return Yr(Lr.singleDigitSigned,t);case 2:return Yr(Lr.twoDigitsSigned,t);case 3:return Yr(Lr.threeDigitsSigned,t);case 4:return Yr(Lr.fourDigitsSigned,t);default:return Yr(new RegExp("^-?\\d{1,"+e+"}"),t)}}function Fr(e){switch(e){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;default:return 0}}function Wr(e,t){var n,r=t>0,a=r?t:1-t;if(a<=50)n=e||100;else{var o=a+50;n=e+100*Math.floor(o/100)-(e>=o%100?100:0)}return r?n:1-n}function Pr(e){return e%400==0||e%4==0&&e%100!=0}var Rr=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",130),Sr(mr(e),"incompatibleTokens",["Y","R","u","w","I","i","e","c","t","T"]),e}return kr(n,[{key:"parse",value:function(e,t,n){var r=function(e){return{year:e,isTwoDigitYear:"yy"===t}};switch(t){case"y":return Ar(Hr(4,e),r);case"yo":return Ar(n.ordinalNumber(e,{unit:"year"}),r);default:return Ar(Hr(t.length,e),r)}}},{key:"validate",value:function(e,t){return t.isTwoDigitYear||t.year>0}},{key:"set",value:function(e,t,n){var r=e.getUTCFullYear();if(n.isTwoDigitYear){var a=Wr(n.year,r);return e.setUTCFullYear(a,0,1),e.setUTCHours(0,0,0,0),e}var o="era"in t&&1!==t.era?1-n.year:n.year;return e.setUTCFullYear(o,0,1),e.setUTCHours(0,0,0,0),e}}]),n}(qr),Qr=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",130),Sr(mr(e),"incompatibleTokens",["y","R","u","Q","q","M","L","I","d","D","i","t","T"]),e}return kr(n,[{key:"parse",value:function(e,t,n){var r=function(e){return{year:e,isTwoDigitYear:"YY"===t}};switch(t){case"Y":return Ar(Hr(4,e),r);case"Yo":return Ar(n.ordinalNumber(e,{unit:"year"}),r);default:return Ar(Hr(t.length,e),r)}}},{key:"validate",value:function(e,t){return t.isTwoDigitYear||t.year>0}},{key:"set",value:function(e,t,n,r){var a=yt(e,r);if(n.isTwoDigitYear){var o=Wr(n.year,a);return e.setUTCFullYear(o,0,r.firstWeekContainsDate),e.setUTCHours(0,0,0,0),pt(e,r)}var i="era"in t&&1!==t.era?1-n.year:n.year;return e.setUTCFullYear(i,0,r.firstWeekContainsDate),e.setUTCHours(0,0,0,0),pt(e,r)}}]),n}(qr),Br=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",130),Sr(mr(e),"incompatibleTokens",["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]),e}return kr(n,[{key:"parse",value:function(e,t){return Ur("R"===t?4:t.length,e)}},{key:"set",value:function(e,t,n){var r=new Date(0);return r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0),ft(r)}}]),n}(qr),Xr=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",130),Sr(mr(e),"incompatibleTokens",["G","y","Y","R","w","I","i","e","c","t","T"]),e}return kr(n,[{key:"parse",value:function(e,t){return Ur("u"===t?4:t.length,e)}},{key:"set",value:function(e,t,n){return e.setUTCFullYear(n,0,1),e.setUTCHours(0,0,0,0),e}}]),n}(qr),$r=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",120),Sr(mr(e),"incompatibleTokens",["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]),e}return kr(n,[{key:"parse",value:function(e,t,n){switch(t){case"Q":case"QQ":return Hr(t.length,e);case"Qo":return n.ordinalNumber(e,{unit:"quarter"});case"QQQ":return n.quarter(e,{width:"abbreviated",context:"formatting"})||n.quarter(e,{width:"narrow",context:"formatting"});case"QQQQQ":return n.quarter(e,{width:"narrow",context:"formatting"});default:return n.quarter(e,{width:"wide",context:"formatting"})||n.quarter(e,{width:"abbreviated",context:"formatting"})||n.quarter(e,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(e,t){return t>=1&&t<=4}},{key:"set",value:function(e,t,n){return e.setUTCMonth(3*(n-1),1),e.setUTCHours(0,0,0,0),e}}]),n}(qr),Jr=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",120),Sr(mr(e),"incompatibleTokens",["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]),e}return kr(n,[{key:"parse",value:function(e,t,n){switch(t){case"q":case"qq":return Hr(t.length,e);case"qo":return n.ordinalNumber(e,{unit:"quarter"});case"qqq":return n.quarter(e,{width:"abbreviated",context:"standalone"})||n.quarter(e,{width:"narrow",context:"standalone"});case"qqqqq":return n.quarter(e,{width:"narrow",context:"standalone"});default:return n.quarter(e,{width:"wide",context:"standalone"})||n.quarter(e,{width:"abbreviated",context:"standalone"})||n.quarter(e,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function(e,t){return t>=1&&t<=4}},{key:"set",value:function(e,t,n){return e.setUTCMonth(3*(n-1),1),e.setUTCHours(0,0,0,0),e}}]),n}(qr),zr=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"incompatibleTokens",["Y","R","q","Q","L","w","I","D","i","e","c","t","T"]),Sr(mr(e),"priority",110),e}return kr(n,[{key:"parse",value:function(e,t,n){var r=function(e){return e-1};switch(t){case"M":return Ar(Yr(Lr.month,e),r);case"MM":return Ar(Hr(2,e),r);case"Mo":return Ar(n.ordinalNumber(e,{unit:"month"}),r);case"MMM":return n.month(e,{width:"abbreviated",context:"formatting"})||n.month(e,{width:"narrow",context:"formatting"});case"MMMMM":return n.month(e,{width:"narrow",context:"formatting"});default:return n.month(e,{width:"wide",context:"formatting"})||n.month(e,{width:"abbreviated",context:"formatting"})||n.month(e,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(e,t){return t>=0&&t<=11}},{key:"set",value:function(e,t,n){return e.setUTCMonth(n,1),e.setUTCHours(0,0,0,0),e}}]),n}(qr),Gr=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",110),Sr(mr(e),"incompatibleTokens",["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]),e}return kr(n,[{key:"parse",value:function(e,t,n){var r=function(e){return e-1};switch(t){case"L":return Ar(Yr(Lr.month,e),r);case"LL":return Ar(Hr(2,e),r);case"Lo":return Ar(n.ordinalNumber(e,{unit:"month"}),r);case"LLL":return n.month(e,{width:"abbreviated",context:"standalone"})||n.month(e,{width:"narrow",context:"standalone"});case"LLLLL":return n.month(e,{width:"narrow",context:"standalone"});default:return n.month(e,{width:"wide",context:"standalone"})||n.month(e,{width:"abbreviated",context:"standalone"})||n.month(e,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function(e,t){return t>=0&&t<=11}},{key:"set",value:function(e,t,n){return e.setUTCMonth(n,1),e.setUTCHours(0,0,0,0),e}}]),n}(qr),_r=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",100),Sr(mr(e),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","i","t","T"]),e}return kr(n,[{key:"parse",value:function(e,t,n){switch(t){case"w":return Yr(Lr.week,e);case"wo":return n.ordinalNumber(e,{unit:"week"});default:return Hr(t.length,e)}}},{key:"validate",value:function(e,t){return t>=1&&t<=53}},{key:"set",value:function(e,t,n,r){return pt(function(e,t,n){o(2,arguments);var r=i(e),s=a(t),l=gt(r,n)-s;return r.setUTCDate(r.getUTCDate()-7*l),r}(e,n,r),r)}}]),n}(qr),Vr=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",100),Sr(mr(e),"incompatibleTokens",["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]),e}return kr(n,[{key:"parse",value:function(e,t,n){switch(t){case"I":return Yr(Lr.week,e);case"Io":return n.ordinalNumber(e,{unit:"week"});default:return Hr(t.length,e)}}},{key:"validate",value:function(e,t){return t>=1&&t<=53}},{key:"set",value:function(e,t,n){return ft(function(e,t){o(2,arguments);var n=i(e),r=a(t),s=ht(n)-r;return n.setUTCDate(n.getUTCDate()-7*s),n}(e,n))}}]),n}(qr),Zr=[31,28,31,30,31,30,31,31,30,31,30,31],Kr=[31,29,31,30,31,30,31,31,30,31,30,31],ea=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",90),Sr(mr(e),"subPriority",1),Sr(mr(e),"incompatibleTokens",["Y","R","q","Q","w","I","D","i","e","c","t","T"]),e}return kr(n,[{key:"parse",value:function(e,t,n){switch(t){case"d":return Yr(Lr.date,e);case"do":return n.ordinalNumber(e,{unit:"date"});default:return Hr(t.length,e)}}},{key:"validate",value:function(e,t){var n=Pr(e.getUTCFullYear()),r=e.getUTCMonth();return n?t>=1&&t<=Kr[r]:t>=1&&t<=Zr[r]}},{key:"set",value:function(e,t,n){return e.setUTCDate(n),e.setUTCHours(0,0,0,0),e}}]),n}(qr),ta=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",90),Sr(mr(e),"subpriority",1),Sr(mr(e),"incompatibleTokens",["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]),e}return kr(n,[{key:"parse",value:function(e,t,n){switch(t){case"D":case"DD":return Yr(Lr.dayOfYear,e);case"Do":return n.ordinalNumber(e,{unit:"date"});default:return Hr(t.length,e)}}},{key:"validate",value:function(e,t){return Pr(e.getUTCFullYear())?t>=1&&t<=366:t>=1&&t<=365}},{key:"set",value:function(e,t,n){return e.setUTCMonth(0,n),e.setUTCHours(0,0,0,0),e}}]),n}(qr);function na(e,t,n){var r,s,l,c,u,d,m,f;o(2,arguments);var v=g(),h=a(null!==(r=null!==(s=null!==(l=null!==(c=null==n?void 0:n.weekStartsOn)&&void 0!==c?c:null==n||null===(u=n.locale)||void 0===u||null===(d=u.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==l?l:v.weekStartsOn)&&void 0!==s?s:null===(m=v.locale)||void 0===m||null===(f=m.options)||void 0===f?void 0:f.weekStartsOn)&&void 0!==r?r:0);if(!(h>=0&&h<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var p=i(e),y=a(t),w=((y%7+7)%7<h?7:0)+y-p.getUTCDay();return p.setUTCDate(p.getUTCDate()+w),p}var ra=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",90),Sr(mr(e),"incompatibleTokens",["D","i","e","c","t","T"]),e}return kr(n,[{key:"parse",value:function(e,t,n){switch(t){case"E":case"EE":case"EEE":return n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});case"EEEEE":return n.day(e,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});default:return n.day(e,{width:"wide",context:"formatting"})||n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(e,t){return t>=0&&t<=6}},{key:"set",value:function(e,t,n,r){return(e=na(e,n,r)).setUTCHours(0,0,0,0),e}}]),n}(qr),aa=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",90),Sr(mr(e),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]),e}return kr(n,[{key:"parse",value:function(e,t,n,r){var a=function(e){var t=7*Math.floor((e-1)/7);return(e+r.weekStartsOn+6)%7+t};switch(t){case"e":case"ee":return Ar(Hr(t.length,e),a);case"eo":return Ar(n.ordinalNumber(e,{unit:"day"}),a);case"eee":return n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});case"eeeee":return n.day(e,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});default:return n.day(e,{width:"wide",context:"formatting"})||n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(e,t){return t>=0&&t<=6}},{key:"set",value:function(e,t,n,r){return(e=na(e,n,r)).setUTCHours(0,0,0,0),e}}]),n}(qr),oa=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",90),Sr(mr(e),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]),e}return kr(n,[{key:"parse",value:function(e,t,n,r){var a=function(e){var t=7*Math.floor((e-1)/7);return(e+r.weekStartsOn+6)%7+t};switch(t){case"c":case"cc":return Ar(Hr(t.length,e),a);case"co":return Ar(n.ordinalNumber(e,{unit:"day"}),a);case"ccc":return n.day(e,{width:"abbreviated",context:"standalone"})||n.day(e,{width:"short",context:"standalone"})||n.day(e,{width:"narrow",context:"standalone"});case"ccccc":return n.day(e,{width:"narrow",context:"standalone"});case"cccccc":return n.day(e,{width:"short",context:"standalone"})||n.day(e,{width:"narrow",context:"standalone"});default:return n.day(e,{width:"wide",context:"standalone"})||n.day(e,{width:"abbreviated",context:"standalone"})||n.day(e,{width:"short",context:"standalone"})||n.day(e,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function(e,t){return t>=0&&t<=6}},{key:"set",value:function(e,t,n,r){return(e=na(e,n,r)).setUTCHours(0,0,0,0),e}}]),n}(qr),ia=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",90),Sr(mr(e),"incompatibleTokens",["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]),e}return kr(n,[{key:"parse",value:function(e,t,n){var r=function(e){return 0===e?7:e};switch(t){case"i":case"ii":return Hr(t.length,e);case"io":return n.ordinalNumber(e,{unit:"day"});case"iii":return Ar(n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"}),r);case"iiiii":return Ar(n.day(e,{width:"narrow",context:"formatting"}),r);case"iiiiii":return Ar(n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"}),r);default:return Ar(n.day(e,{width:"wide",context:"formatting"})||n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"}),r)}}},{key:"validate",value:function(e,t){return t>=1&&t<=7}},{key:"set",value:function(e,t,n){return e=function(e,t){o(2,arguments);var n=a(t);n%7==0&&(n-=7);var r=i(e),s=((n%7+7)%7<1?7:0)+n-r.getUTCDay();return r.setUTCDate(r.getUTCDate()+s),r}(e,n),e.setUTCHours(0,0,0,0),e}}]),n}(qr),sa=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",80),Sr(mr(e),"incompatibleTokens",["b","B","H","k","t","T"]),e}return kr(n,[{key:"parse",value:function(e,t,n){switch(t){case"a":case"aa":case"aaa":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"});case"aaaaa":return n.dayPeriod(e,{width:"narrow",context:"formatting"});default:return n.dayPeriod(e,{width:"wide",context:"formatting"})||n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"})}}},{key:"set",value:function(e,t,n){return e.setUTCHours(Fr(n),0,0,0),e}}]),n}(qr),la=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",80),Sr(mr(e),"incompatibleTokens",["a","B","H","k","t","T"]),e}return kr(n,[{key:"parse",value:function(e,t,n){switch(t){case"b":case"bb":case"bbb":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"});case"bbbbb":return n.dayPeriod(e,{width:"narrow",context:"formatting"});default:return n.dayPeriod(e,{width:"wide",context:"formatting"})||n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"})}}},{key:"set",value:function(e,t,n){return e.setUTCHours(Fr(n),0,0,0),e}}]),n}(qr),ca=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",80),Sr(mr(e),"incompatibleTokens",["a","b","t","T"]),e}return kr(n,[{key:"parse",value:function(e,t,n){switch(t){case"B":case"BB":case"BBB":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"});case"BBBBB":return n.dayPeriod(e,{width:"narrow",context:"formatting"});default:return n.dayPeriod(e,{width:"wide",context:"formatting"})||n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"})}}},{key:"set",value:function(e,t,n){return e.setUTCHours(Fr(n),0,0,0),e}}]),n}(qr),ua=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",70),Sr(mr(e),"incompatibleTokens",["H","K","k","t","T"]),e}return kr(n,[{key:"parse",value:function(e,t,n){switch(t){case"h":return Yr(Lr.hour12h,e);case"ho":return n.ordinalNumber(e,{unit:"hour"});default:return Hr(t.length,e)}}},{key:"validate",value:function(e,t){return t>=1&&t<=12}},{key:"set",value:function(e,t,n){var r=e.getUTCHours()>=12;return r&&n<12?e.setUTCHours(n+12,0,0,0):r||12!==n?e.setUTCHours(n,0,0,0):e.setUTCHours(0,0,0,0),e}}]),n}(qr),da=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",70),Sr(mr(e),"incompatibleTokens",["a","b","h","K","k","t","T"]),e}return kr(n,[{key:"parse",value:function(e,t,n){switch(t){case"H":return Yr(Lr.hour23h,e);case"Ho":return n.ordinalNumber(e,{unit:"hour"});default:return Hr(t.length,e)}}},{key:"validate",value:function(e,t){return t>=0&&t<=23}},{key:"set",value:function(e,t,n){return e.setUTCHours(n,0,0,0),e}}]),n}(qr),ma=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",70),Sr(mr(e),"incompatibleTokens",["h","H","k","t","T"]),e}return kr(n,[{key:"parse",value:function(e,t,n){switch(t){case"K":return Yr(Lr.hour11h,e);case"Ko":return n.ordinalNumber(e,{unit:"hour"});default:return Hr(t.length,e)}}},{key:"validate",value:function(e,t){return t>=0&&t<=11}},{key:"set",value:function(e,t,n){return e.getUTCHours()>=12&&n<12?e.setUTCHours(n+12,0,0,0):e.setUTCHours(n,0,0,0),e}}]),n}(qr),fa=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",70),Sr(mr(e),"incompatibleTokens",["a","b","h","H","K","t","T"]),e}return kr(n,[{key:"parse",value:function(e,t,n){switch(t){case"k":return Yr(Lr.hour24h,e);case"ko":return n.ordinalNumber(e,{unit:"hour"});default:return Hr(t.length,e)}}},{key:"validate",value:function(e,t){return t>=1&&t<=24}},{key:"set",value:function(e,t,n){var r=n<=24?n%24:n;return e.setUTCHours(r,0,0,0),e}}]),n}(qr),va=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",60),Sr(mr(e),"incompatibleTokens",["t","T"]),e}return kr(n,[{key:"parse",value:function(e,t,n){switch(t){case"m":return Yr(Lr.minute,e);case"mo":return n.ordinalNumber(e,{unit:"minute"});default:return Hr(t.length,e)}}},{key:"validate",value:function(e,t){return t>=0&&t<=59}},{key:"set",value:function(e,t,n){return e.setUTCMinutes(n,0,0),e}}]),n}(qr),ha=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",50),Sr(mr(e),"incompatibleTokens",["t","T"]),e}return kr(n,[{key:"parse",value:function(e,t,n){switch(t){case"s":return Yr(Lr.second,e);case"so":return n.ordinalNumber(e,{unit:"second"});default:return Hr(t.length,e)}}},{key:"validate",value:function(e,t){return t>=0&&t<=59}},{key:"set",value:function(e,t,n){return e.setUTCSeconds(n,0),e}}]),n}(qr),pa=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",30),Sr(mr(e),"incompatibleTokens",["t","T"]),e}return kr(n,[{key:"parse",value:function(e,t){return Ar(Hr(t.length,e),(function(e){return Math.floor(e*Math.pow(10,3-t.length))}))}},{key:"set",value:function(e,t,n){return e.setUTCMilliseconds(n),e}}]),n}(qr),ya=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",10),Sr(mr(e),"incompatibleTokens",["t","T","x"]),e}return kr(n,[{key:"parse",value:function(e,t){switch(t){case"X":return Ir(Dr,e);case"XX":return Ir(Er,e);case"XXXX":return Ir(Mr,e);case"XXXXX":return Ir(Or,e);default:return Ir(Nr,e)}}},{key:"set",value:function(e,t,n){return t.timestampIsSet?e:new Date(e.getTime()-n)}}]),n}(qr),ga=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",10),Sr(mr(e),"incompatibleTokens",["t","T","X"]),e}return kr(n,[{key:"parse",value:function(e,t){switch(t){case"x":return Ir(Dr,e);case"xx":return Ir(Er,e);case"xxxx":return Ir(Mr,e);case"xxxxx":return Ir(Or,e);default:return Ir(Nr,e)}}},{key:"set",value:function(e,t,n){return t.timestampIsSet?e:new Date(e.getTime()-n)}}]),n}(qr),wa=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",40),Sr(mr(e),"incompatibleTokens","*"),e}return kr(n,[{key:"parse",value:function(e){return jr(e)}},{key:"set",value:function(e,t,n){return[new Date(1e3*n),{timestampIsSet:!0}]}}]),n}(qr),ka=function(e){vr(n,e);var t=pr(n);function n(){var e;yr(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Sr(mr(e=t.call.apply(t,[this].concat(a))),"priority",20),Sr(mr(e),"incompatibleTokens","*"),e}return kr(n,[{key:"parse",value:function(e){return jr(e)}},{key:"set",value:function(e,t,n){return[new Date(n),{timestampIsSet:!0}]}}]),n}(qr),Sa={G:new xr,y:new Rr,Y:new Qr,R:new Br,u:new Xr,Q:new $r,q:new Jr,M:new zr,L:new Gr,w:new _r,I:new Vr,d:new ea,D:new ta,E:new ra,e:new aa,c:new oa,i:new ia,a:new sa,b:new la,B:new ca,h:new ua,H:new da,K:new ma,k:new fa,m:new va,s:new ha,S:new pa,X:new ya,x:new ga,t:new wa,T:new ka},ba=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Ta=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Ca=/^'([^]*?)'?$/,qa=/''/g,xa=/\S/,La=/[a-zA-Z]/;function Da(e,t,n,s){var l,c,u,d,m,f,v,h,p,y,w,k,S,b,T,q,x,L;o(3,arguments);var D=String(e),E=String(t),M=g(),N=null!==(l=null!==(c=null==s?void 0:s.locale)&&void 0!==c?c:M.locale)&&void 0!==l?l:Rt;if(!N.match)throw new RangeError("locale must contain match property");var O=a(null!==(u=null!==(d=null!==(m=null!==(f=null==s?void 0:s.firstWeekContainsDate)&&void 0!==f?f:null==s||null===(v=s.locale)||void 0===v||null===(h=v.options)||void 0===h?void 0:h.firstWeekContainsDate)&&void 0!==m?m:M.firstWeekContainsDate)&&void 0!==d?d:null===(p=M.locale)||void 0===p||null===(y=p.options)||void 0===y?void 0:y.firstWeekContainsDate)&&void 0!==u?u:1);if(!(O>=1&&O<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var A=a(null!==(w=null!==(k=null!==(S=null!==(b=null==s?void 0:s.weekStartsOn)&&void 0!==b?b:null==s||null===(T=s.locale)||void 0===T||null===(q=T.options)||void 0===q?void 0:q.weekStartsOn)&&void 0!==S?S:M.weekStartsOn)&&void 0!==k?k:null===(x=M.locale)||void 0===x||null===(L=x.options)||void 0===L?void 0:L.weekStartsOn)&&void 0!==w?w:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(""===E)return""===D?i(n):new Date(NaN);var Y,I={firstWeekContainsDate:O,weekStartsOn:A,locale:N},j=[new Cr],H=E.match(Ta).map((function(e){var t=e[0];return t in Et?(0,Et[t])(e,N.formatLong):e})).join("").match(ba),U=[],F=dr(H);try{var W=function(){var t=Y.value;null!=s&&s.useAdditionalWeekYearTokens||!At(t)||Yt(t,E,e),null!=s&&s.useAdditionalDayOfYearTokens||!Ot(t)||Yt(t,E,e);var n=t[0],r=Sa[n];if(r){var a=r.incompatibleTokens;if(Array.isArray(a)){var o=U.find((function(e){return a.includes(e.token)||e.token===n}));if(o)throw new RangeError("The format string mustn't contain `".concat(o.fullToken,"` and `").concat(t,"` at the same time"))}else if("*"===r.incompatibleTokens&&U.length>0)throw new RangeError("The format string mustn't contain `".concat(t,"` and any other token at the same time"));U.push({token:n,fullToken:t});var i=r.run(D,t,N.match,I);if(!i)return{v:new Date(NaN)};j.push(i.setter),D=i.rest}else{if(n.match(La))throw new RangeError("Format string contains an unescaped latin alphabet character `"+n+"`");if("''"===t?t="'":"'"===n&&(t=t.match(Ca)[1].replace(qa,"'")),0!==D.indexOf(t))return{v:new Date(NaN)};D=D.slice(t.length)}};for(F.s();!(Y=F.n()).done;){var P=W();if("object"===r(P))return P.v}}catch(e){F.e(e)}finally{F.f()}if(D.length>0&&xa.test(D))return new Date(NaN);var R=j.map((function(e){return e.priority})).sort((function(e,t){return t-e})).filter((function(e,t,n){return n.indexOf(e)===t})).map((function(e){return j.filter((function(t){return t.priority===e})).sort((function(e,t){return t.subPriority-e.subPriority}))})).map((function(e){return e[0]})),Q=i(n);if(isNaN(Q.getTime()))return new Date(NaN);var B,X=mt(Q,C(Q)),$={},J=dr(R);try{for(J.s();!(B=J.n()).done;){var z=B.value;if(!z.validate(X,I))return new Date(NaN);var G=z.set(X,$,I);Array.isArray(G)?(X=G[0],Gt($,G[1])):X=G}}catch(e){J.e(e)}finally{J.f()}return X}function Ea(e,t,n){return o(2,arguments),de(Da(e,t,new Date,n))}function Ma(e){return o(1,arguments),1===i(e).getDay()}function Na(e){return o(1,arguments),i(e).getTime()<Date.now()}function Oa(e){o(1,arguments);var t=i(e);return t.setMinutes(0,0,0),t}function Aa(e,t){o(2,arguments);var n=Oa(e),r=Oa(t);return n.getTime()===r.getTime()}function Ya(e,t,n){o(2,arguments);var r=k(e,n),a=k(t,n);return r.getTime()===a.getTime()}function Ia(e,t){return o(2,arguments),Ya(e,t,{weekStartsOn:1})}function ja(e,t){o(2,arguments);var n=T(e),r=T(t);return n.getTime()===r.getTime()}function Ha(e,t){o(2,arguments);var n=Re(e),r=Re(t);return n.getTime()===r.getTime()}function Ua(e,t){o(2,arguments);var n=i(e),r=i(t);return n.getFullYear()===r.getFullYear()&&n.getMonth()===r.getMonth()}function Fa(e,t){o(2,arguments);var n=Xe(e),r=Xe(t);return n.getTime()===r.getTime()}function Wa(e){o(1,arguments);var t=i(e);return t.setMilliseconds(0),t}function Pa(e,t){o(2,arguments);var n=Wa(e),r=Wa(t);return n.getTime()===r.getTime()}function Ra(e,t){o(2,arguments);var n=i(e),r=i(t);return n.getFullYear()===r.getFullYear()}function Qa(e){return o(1,arguments),Aa(Date.now(),e)}function Ba(e){return o(1,arguments),Ia(e,Date.now())}function Xa(e){return o(1,arguments),Ha(Date.now(),e)}function $a(e){return o(1,arguments),Ua(Date.now(),e)}function Ja(e){return o(1,arguments),Fa(Date.now(),e)}function za(e){return o(1,arguments),Pa(Date.now(),e)}function Ga(e,t){return o(1,arguments),Ya(e,Date.now(),t)}function _a(e){return o(1,arguments),Ra(e,Date.now())}function Va(e){return o(1,arguments),4===i(e).getDay()}function Za(e){return o(1,arguments),ce(e,Date.now())}function Ka(e){return o(1,arguments),ce(e,s(Date.now(),1))}function eo(e){return o(1,arguments),2===i(e).getDay()}function to(e){return o(1,arguments),3===i(e).getDay()}function no(e,t){o(2,arguments);var n=i(e).getTime(),r=i(t.start).getTime(),a=i(t.end).getTime();if(!(r<=a))throw new RangeError("Invalid interval");return n>=r&&n<=a}function ro(e,t){return o(2,arguments),s(e,-a(t))}function ao(e){return o(1,arguments),ce(e,ro(Date.now(),1))}function oo(e){o(1,arguments);var t=i(e),n=t.getFullYear(),r=9+10*Math.floor(n/10);return t.setFullYear(r+1,0,0),t.setHours(0,0,0,0),t}function io(e,t){var n,r,s,l,c,u,d,m;o(1,arguments);var f=g(),v=a(null!==(n=null!==(r=null!==(s=null!==(l=null==t?void 0:t.weekStartsOn)&&void 0!==l?l:null==t||null===(c=t.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==s?s:f.weekStartsOn)&&void 0!==r?r:null===(d=f.locale)||void 0===d||null===(m=d.options)||void 0===m?void 0:m.weekStartsOn)&&void 0!==n?n:0);if(!(v>=0&&v<=6))throw new RangeError("weekStartsOn must be between 0 and 6");var h=i(e),p=h.getDay(),y=6+(p<v?-7:0)-(p-v);return h.setHours(0,0,0,0),h.setDate(h.getDate()+y),h}function so(e){return o(1,arguments),io(e,{weekStartsOn:1})}function lo(e){o(1,arguments);var t=b(e),n=new Date(0);n.setFullYear(t+1,0,4),n.setHours(0,0,0,0);var r=S(n);return r.setDate(r.getDate()-1),r}function co(e){o(1,arguments);var t=i(e),n=t.getMonth(),r=n-n%3+3;return t.setMonth(r,0),t.setHours(0,0,0,0),t}function uo(e){o(1,arguments);var t=i(e),n=t.getFullYear();return t.setFullYear(n+1,0,0),t.setHours(0,0,0,0),t}var mo=/(\w)\1*|''|'(''|[^'])+('|$)|./g,fo=/^'([^]*?)'?$/,vo=/''/g,ho=/[a-zA-Z]/;function po(e,t){o(2,arguments);var n=i(e);if(!de(n))throw new RangeError("Invalid time value");var r=mt(n,C(n)),a=t.match(mo);return a?a.map((function(e){if("''"===e)return"'";var t,n,a=e[0];if("'"===a)return(n=(t=e).match(fo))?n[1].replace(vo,"'"):t;var o=St[a];if(o)return o(r,e);if(a.match(ho))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return e})).join(""):""}var yo=365.2425;function go(e){var t=e.years,n=e.months,r=e.weeks,a=e.days,i=e.hours,s=e.minutes,l=e.seconds;o(1,arguments);var c=0;t&&(c+=t*yo),n&&(c+=n*(yo/12)),r&&(c+=7*r),a&&(c+=a);var u=24*c*60*60;return i&&(u+=60*i*60),s&&(u+=60*s),l&&(u+=l),Math.round(1e3*u)}function wo(e){o(1,arguments);var t=e/z;return Math.floor(t)}function ko(e){o(1,arguments);var t=e/J;return Math.floor(t)}function So(e){o(1,arguments);var t=e/G;return Math.floor(t)}function bo(e){o(1,arguments);var t=e/V;return Math.floor(t)}function To(e){return o(1,arguments),Math.floor(e*J)}function Co(e){return o(1,arguments),Math.floor(e*ne)}function qo(e){o(1,arguments);var t=e/Z;return Math.floor(t)}function xo(e){o(1,arguments);var t=e/K;return Math.floor(t)}function Lo(e,t){o(2,arguments);var n=t-bn(e);return n<=0&&(n+=7),s(e,n)}function Do(e){return o(1,arguments),Lo(e,5)}function Eo(e){return o(1,arguments),Lo(e,1)}function Mo(e){return o(1,arguments),Lo(e,6)}function No(e){return o(1,arguments),Lo(e,0)}function Oo(e){return o(1,arguments),Lo(e,4)}function Ao(e){return o(1,arguments),Lo(e,2)}function Yo(e){return o(1,arguments),Lo(e,3)}function Io(e,t){var n;o(1,arguments);var r=a(null!==(n=null==t?void 0:t.additionalDigits)&&void 0!==n?n:2);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var i,s=function(e){var t,n={},r=e.split(jo.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?t=r[0]:(n.date=r[0],t=r[1],jo.timeZoneDelimiter.test(n.date)&&(n.date=e.split(jo.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var a=jo.timezone.exec(t);a?(n.time=t.replace(a[1],""),n.timezone=a[1]):n.time=t}return n}(e);if(s.date){var l=function(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:NaN,restDateString:""};var a=r[1]?parseInt(r[1]):null,o=r[2]?parseInt(r[2]):null;return{year:null===o?a:100*o,restDateString:e.slice((r[1]||r[2]).length)}}(s.date,r);i=function(e,t){if(null===t)return new Date(NaN);var n=e.match(Ho);if(!n)return new Date(NaN);var r=!!n[4],a=Wo(n[1]),o=Wo(n[2])-1,i=Wo(n[3]),s=Wo(n[4]),l=Wo(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,s,l)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var a=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(t,s,l):new Date(NaN);var c=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(Ro[t]||(Qo(e)?29:28))}(t,o,i)&&function(e,t){return t>=1&&t<=(Qo(e)?366:365)}(t,a)?(c.setUTCFullYear(t,o,Math.max(a,i)),c):new Date(NaN)}(l.restDateString,l.year)}if(!i||isNaN(i.getTime()))return new Date(NaN);var c,u=i.getTime(),d=0;if(s.time&&(d=function(e){var t=e.match(Uo);if(!t)return NaN;var n=Po(t[1]),r=Po(t[2]),a=Po(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,a)?n*z+r*J+1e3*a:NaN}(s.time),isNaN(d)))return new Date(NaN);if(!s.timezone){var m=new Date(u+d),f=new Date(0);return f.setFullYear(m.getUTCFullYear(),m.getUTCMonth(),m.getUTCDate()),f.setHours(m.getUTCHours(),m.getUTCMinutes(),m.getUTCSeconds(),m.getUTCMilliseconds()),f}return c=function(e){if("Z"===e)return 0;var t=e.match(Fo);if(!t)return 0;var n="+"===t[1]?-1:1,r=parseInt(t[2]),a=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,a)?n*(r*z+a*J):NaN}(s.timezone),isNaN(c)?new Date(NaN):new Date(u+d+c)}var jo={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},Ho=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,Uo=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,Fo=/^([+-])(\d{2})(?::?(\d{2}))?$/;function Wo(e){return e?parseInt(e):1}function Po(e){return e&&parseFloat(e.replace(",","."))||0}var Ro=[31,null,31,30,31,30,31,31,30,31,30,31];function Qo(e){return e%400==0||e%4==0&&e%100!=0}function Bo(e){if(o(1,arguments),"string"==typeof e){var t=e.match(/(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2})(?:\.(\d{0,7}))?(?:Z|(.)(\d{2}):?(\d{2})?)?/);return t?new Date(Date.UTC(+t[1],+t[2]-1,+t[3],+t[4]-(+t[9]||0)*("-"==t[8]?-1:1),+t[5]-(+t[10]||0)*("-"==t[8]?-1:1),+t[6],+((t[7]||"0")+"00").substring(0,3))):new Date(NaN)}return i(e)}function Xo(e,t){o(2,arguments);var n=bn(e)-t;return n<=0&&(n+=7),ro(e,n)}function $o(e){return o(1,arguments),Xo(e,5)}function Jo(e){return o(1,arguments),Xo(e,1)}function zo(e){return o(1,arguments),Xo(e,6)}function Go(e){return o(1,arguments),Xo(e,0)}function _o(e){return o(1,arguments),Xo(e,4)}function Vo(e){return o(1,arguments),Xo(e,2)}function Zo(e){return o(1,arguments),Xo(e,3)}function Ko(e){return o(1,arguments),Math.floor(e*Z)}function ei(e){o(1,arguments);var t=e/ee;return Math.floor(t)}function ti(e,t){var n;if(arguments.length<1)throw new TypeError("1 argument required, but only none provided present");var r=a(null!==(n=null==t?void 0:t.nearestTo)&&void 0!==n?n:1);if(r<1||r>30)throw new RangeError("`options.nearestTo` must be between 1 and 30");var o=i(e),s=o.getSeconds(),l=o.getMinutes()+s/60,c=Le(null==t?void 0:t.roundingMethod)(l/r)*r,u=l%r,d=Math.round(u/r)*r;return new Date(o.getFullYear(),o.getMonth(),o.getDate(),o.getHours(),c+d)}function ni(e){o(1,arguments);var t=e/te;return Math.floor(t)}function ri(e){return o(1,arguments),e*G}function ai(e){o(1,arguments);var t=e/ne;return Math.floor(t)}function oi(e,t){o(2,arguments);var n=i(e),r=a(t),s=n.getFullYear(),l=n.getDate(),c=new Date(0);c.setFullYear(s,r,15),c.setHours(0,0,0,0);var u=Cn(c);return n.setMonth(r,Math.min(l,u)),n}function ii(e,t){if(o(2,arguments),"object"!==r(t)||null===t)throw new RangeError("values parameter must be an object");var n=i(e);return isNaN(n.getTime())?new Date(NaN):(null!=t.year&&n.setFullYear(t.year),null!=t.month&&(n=oi(n,t.month)),null!=t.date&&n.setDate(a(t.date)),null!=t.hours&&n.setHours(a(t.hours)),null!=t.minutes&&n.setMinutes(a(t.minutes)),null!=t.seconds&&n.setSeconds(a(t.seconds)),null!=t.milliseconds&&n.setMilliseconds(a(t.milliseconds)),n)}function si(e,t){o(2,arguments);var n=i(e),r=a(t);return n.setDate(r),n}function li(e,t,n){var r,l,c,u,d,m,f,v;o(2,arguments);var h=g(),p=a(null!==(r=null!==(l=null!==(c=null!==(u=null==n?void 0:n.weekStartsOn)&&void 0!==u?u:null==n||null===(d=n.locale)||void 0===d||null===(m=d.options)||void 0===m?void 0:m.weekStartsOn)&&void 0!==c?c:h.weekStartsOn)&&void 0!==l?l:null===(f=h.locale)||void 0===f||null===(v=f.options)||void 0===v?void 0:v.weekStartsOn)&&void 0!==r?r:0);if(!(p>=0&&p<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var y=i(e),w=a(t),k=y.getDay(),S=7-p;return s(y,w<0||w>6?w-(k+S)%7:((w%7+7)%7+S)%7-(k+S)%7)}function ci(e,t){o(2,arguments);var n=i(e),r=a(t);return n.setMonth(0),n.setDate(r),n}function ui(e){o(1,arguments);var t={},n=g();for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r]);for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&(void 0===e[a]?delete t[a]:t[a]=e[a]);w(t)}function di(e,t){o(2,arguments);var n=i(e),r=a(t);return n.setHours(r),n}function mi(e,t){o(2,arguments);var n=i(e);return s(n,a(t)-Mn(n))}function fi(e,t){o(2,arguments);var n=i(e),r=a(t),s=On(n)-r;return n.setDate(n.getDate()-7*s),n}function vi(e,t){o(2,arguments);var n=i(e),r=a(t);return n.setMilliseconds(r),n}function hi(e,t){o(2,arguments);var n=i(e),r=a(t);return n.setMinutes(r),n}function pi(e,t){o(2,arguments);var n=i(e),r=a(t)-(Math.floor(n.getMonth()/3)+1);return oi(n,n.getMonth()+3*r)}function yi(e,t){o(2,arguments);var n=i(e),r=a(t);return n.setSeconds(r),n}function gi(e,t,n){o(2,arguments);var r=i(e),s=a(t),l=$n(r,n)-s;return r.setDate(r.getDate()-7*l),r}function wi(e,t,n){var r,s,l,c,u,d,m,f;o(2,arguments);var v=g(),h=a(null!==(r=null!==(s=null!==(l=null!==(c=null==n?void 0:n.firstWeekContainsDate)&&void 0!==c?c:null==n||null===(u=n.locale)||void 0===u||null===(d=u.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==l?l:v.firstWeekContainsDate)&&void 0!==s?s:null===(m=v.locale)||void 0===m||null===(f=m.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==r?r:1),p=i(e),y=a(t),w=L(p,Bn(p,n)),k=new Date(0);return k.setFullYear(y,0,h),k.setHours(0,0,0,0),(p=Bn(k,n)).setDate(p.getDate()+w),p}function ki(e,t){o(2,arguments);var n=i(e),r=a(t);return isNaN(n.getTime())?new Date(NaN):(n.setFullYear(r),n)}function Si(e){o(1,arguments);var t=i(e),n=t.getFullYear(),r=10*Math.floor(n/10);return t.setFullYear(r,0,1),t.setHours(0,0,0,0),t}function bi(){return q(Date.now())}function Ti(){var e=new Date,t=e.getFullYear(),n=e.getMonth(),r=e.getDate(),a=new Date(0);return a.setFullYear(t,n,r+1),a.setHours(0,0,0,0),a}function Ci(){var e=new Date,t=e.getFullYear(),n=e.getMonth(),r=e.getDate(),a=new Date(0);return a.setFullYear(t,n,r-1),a.setHours(0,0,0,0),a}function qi(e,t){return o(2,arguments),l(e,-a(t))}function xi(e,t){if(o(2,arguments),!t||"object"!==r(t))return new Date(NaN);var n=t.years?a(t.years):0,i=t.months?a(t.months):0,s=t.weeks?a(t.weeks):0,l=t.days?a(t.days):0,c=t.hours?a(t.hours):0,u=t.minutes?a(t.minutes):0,d=t.seconds?a(t.seconds):0,m=ro(qi(e,i+12*n),l+7*s),f=1e3*(d+60*(u+60*c));return new Date(m.getTime()-f)}function Li(e,t){return o(2,arguments),f(e,-a(t))}function Di(e,t){return o(2,arguments),p(e,-a(t))}function Ei(e,t){return o(2,arguments),N(e,-a(t))}function Mi(e,t){return o(2,arguments),O(e,-a(t))}function Ni(e,t){return o(2,arguments),A(e,-a(t))}function Oi(e,t){return o(2,arguments),Y(e,-a(t))}function Ai(e,t){return o(2,arguments),I(e,-a(t))}function Yi(e){return o(1,arguments),Math.floor(e*B)}function Ii(e){return o(1,arguments),Math.floor(e*K)}function ji(e){return o(1,arguments),Math.floor(e*ee)}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,n),o.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{const{isSameDay:e,parseISO:t,differenceInDays:r}=n(105);(function(){const e=document.querySelector(".creator-menu");document.querySelector(".project-creator").addEventListener("click",(()=>{!function(){const e=document.querySelector(".task-details"),t=document.querySelector(".wrapper");setTimeout((()=>{t.classList.remove("details")}),250),e.classList.remove("active-task-details")}(),e.classList.add("active-menu"),document.querySelector("body").classList.add("menu-active")})),document.querySelector(".leave-creator i").addEventListener("click",(()=>{e.classList.remove("active-menu"),document.querySelector("body").classList.remove("menu-active")}));const t=document.querySelector(".mobile-adder"),n=document.querySelector(".creator-menu-mobile"),r=document.querySelector(".todo-create-mobile"),a=document.querySelector(".project-create-mobile"),o=document.querySelector(".note-create-mobile"),i=document.querySelector(".todo-create-mobile p"),s=document.querySelector(".project-create-mobile p"),l=document.querySelector(".note-create-mobile p");t.addEventListener("click",(()=>{n.classList.toggle("active-menu-mobile"),document.querySelector(".mobile-adder i").classList.toggle("rotated"),r.classList.toggle("active-todo-mobile"),a.classList.toggle("active-project-mobile"),o.classList.toggle("active-note-mobile"),i.classList.toggle("options-appear"),s.classList.toggle("options-appear"),l.classList.toggle("options-appear"),document.querySelector("body").classList.toggle("menu-active")}));const c=document.querySelector(".todo-create"),u=document.querySelector(".note-create"),d=document.querySelector(".project-create"),m=document.querySelector(".todo-setter"),f=document.querySelector(".todo-editor"),v=document.querySelector(".note-setter"),h=document.querySelector(".note-editor"),p=document.querySelector(".project-setter"),y=document.querySelector(".todo-setter-nav-arrow i"),g=document.querySelector(".todo-editor-nav-arrow i"),w=document.querySelector(".fa-pen-to-square"),k=document.querySelector(".note-setter-nav-arrow i"),S=document.querySelector(".note-editor-nav-arrow i"),b=document.querySelector(".project-setter-nav-arrow i"),T=document.querySelector(".todo-setter-nav-icons i"),C=document.querySelector(".todo-editor-nav-icons i"),q=document.querySelector(".note-setter-nav-icons i"),x=document.querySelector(".note-editor-nav-icons i"),L=document.querySelector(".project-setter-nav-icons i");c.addEventListener("click",(()=>{m.classList.add("active-todo-setter")})),w.addEventListener("click",(()=>{"Notes"===document.querySelector(".details-list p").textContent?h.classList.add("active-note-editor"):f.classList.add("active-todo-editor")})),u.addEventListener("click",(()=>{v.classList.add("active-note-setter")})),d.addEventListener("click",(()=>{p.classList.add("active-project-setter")})),y.addEventListener("click",(()=>{m.classList.remove("active-todo-setter"),e.classList.add("active-menu")})),g.addEventListener("click",(()=>{f.classList.remove("active-todo-editor"),e.classList.add("active-menu")})),k.addEventListener("click",(()=>{v.classList.remove("active-note-setter"),e.classList.add("active-menu")})),S.addEventListener("click",(()=>{h.classList.remove("active-note-editor"),e.classList.add("active-menu")})),b.addEventListener("click",(()=>{p.classList.remove("active-project-setter"),e.classList.add("active-menu")})),T.addEventListener("click",(()=>{m.classList.remove("active-todo-setter"),e.classList.remove("active-menu")})),C.addEventListener("click",(()=>{f.classList.remove("active-todo-editor"),e.classList.remove("active-menu")})),q.addEventListener("click",(()=>{v.classList.remove("active-note-setter"),e.classList.remove("active-menu")})),x.addEventListener("click",(()=>{h.classList.remove("active-note-editor"),e.classList.remove("active-menu")})),L.addEventListener("click",(()=>{p.classList.remove("active-project-setter"),e.classList.remove("active-menu")}));const D=document.querySelector(".todo-create-mobile"),E=document.querySelector(".note-create-mobile"),M=document.querySelector(".project-create-mobile");D.addEventListener("click",(()=>{m.classList.add("active-todo-setter")})),E.addEventListener("click",(()=>{v.classList.add("active-note-setter")})),M.addEventListener("click",(()=>{p.classList.add("active-project-setter")})),T.addEventListener("click",(()=>{m.classList.remove("active-todo-setter"),n.classList.remove("active-menu-mobile"),document.querySelector(".mobile-adder i").classList.remove("rotated"),r.classList.remove("active-todo-mobile"),a.classList.remove("active-project-mobile"),o.classList.remove("active-note-mobile"),i.classList.remove("options-appear"),s.classList.remove("options-appear"),l.classList.remove("options-appear"),document.querySelector("body").classList.remove("menu-active")})),q.addEventListener("click",(()=>{v.classList.remove("active-note-setter"),n.classList.remove("active-menu-mobile"),document.querySelector(".mobile-adder i").classList.remove("rotated"),r.classList.remove("active-todo-mobile"),a.classList.remove("active-project-mobile"),o.classList.remove("active-note-mobile"),i.classList.remove("options-appear"),s.classList.remove("options-appear"),l.classList.remove("options-appear"),document.querySelector("body").classList.remove("menu-active")})),L.addEventListener("click",(()=>{p.classList.remove("active-project-setter"),n.classList.remove("active-menu-mobile"),document.querySelector(".mobile-adder i").classList.remove("rotated"),r.classList.remove("active-todo-mobile"),a.classList.remove("active-project-mobile"),o.classList.remove("active-note-mobile"),i.classList.remove("options-appear"),s.classList.remove("options-appear"),l.classList.remove("options-appear"),document.querySelector("body").classList.remove("menu-active")}))})(),function(){const e=document.querySelector(".mobile-menu"),t=document.querySelector(".nav"),n=document.querySelector(".task-board"),r=document.querySelector("body");if(window.innerWidth<=700){const e=document.querySelectorAll(".options div");document.querySelectorAll(".project-list"),e.forEach((e=>{e.addEventListener("click",(()=>{t.style.pointerEvents="none",t.style.left="-400px",t.style.width="0%",t.style.opacity="1",n.style.pointerEvents="all",n.style.filter="none",r.style.overflow="visible"}))})),document.addEventListener("click",(e=>{e.target.classList.contains("project-list")&&(t.style.pointerEvents="none",t.style.left="-400px",t.style.width="0%",t.style.opacity="1",n.style.pointerEvents="all",n.style.filter="none",r.style.overflow="visible")}))}window.addEventListener("orientationchange",(()=>{location.reload()})),window.addEventListener("orientationchange",(()=>{location.reload()}),!1),e.addEventListener("click",(()=>{t.style.pointerEvents="all",t.style.left="0",t.style.width="80%",t.style.opacity="1",n.style.pointerEvents="none",n.style.filter="brightness(0.3)",r.style.overflow="hidden",t.classList.add("active-nav")})),document.addEventListener("click",(e=>{const a=[];let o=e.target;for(;null!==o;){const e=Array.from(o.classList);a.push(...e),o=o.parentElement}a.includes("nav")||a.includes("mobile-menu")||!t.classList.contains("active-nav")||(t.style.pointerEvents="none",t.style.left="-300px",t.style.width="0%",t.style.opacity="1",n.style.pointerEvents="all",n.style.filter="none",r.style.overflow="visible",t.classList.remove("active-nav"))}))}();const a=document.querySelector(".custom-alert"),o=document.querySelector(".alert-subheading p");function i(e){const t=document.querySelector(".wrapper");a.classList.add("visible-error"),o.textContent=e,t.style.overflow="hidden",t.style.filter="brightness(0.5)",t.style.pointerEvents="none",document.querySelector(".todo-setter").style.pointerEvents="none",new Audio("/dist/audio/wrong-message.mp3").play()}function s(){localStorage.setItem("allTasks",JSON.stringify(k)),localStorage.setItem("importantTasks",JSON.stringify(E)),localStorage.setItem("completedTasks",JSON.stringify(N)),localStorage.setItem("allNotes",JSON.stringify(M)),localStorage.setItem("allLists",JSON.stringify(O)),localStorage.setItem("currentArrNums",JSON.stringify(L)),localStorage.setItem("customListArrNumbers",JSON.stringify(R)),localStorage.setItem("customNumStorage",JSON.stringify(Q)),localStorage.setItem("allTasksTitles",JSON.stringify(S)),localStorage.setItem("allNotesTitles",JSON.stringify(T)),localStorage.setItem("allListTitles",JSON.stringify(b))}document.querySelector(".alert-button button").addEventListener("click",(()=>{$.style.overflow="visible",$.style.filter="brightness(1)",$.style.pointerEvents="all",document.querySelector(".todo-setter").style.pointerEvents="all",a.classList.remove("visible-error")})),window.onload=function(){const e=document.querySelector(".board-date p"),t=new Date,n=`${["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][t.getDay()]}, ${t.getDate()} ${["January","February","March","April","May","June","July","August","September","October","November","December"][t.getMonth()]}`;e.textContent=n,Re(),st(),Oe(),$e();const r=document.querySelectorAll(".project-count p");for(let e=0;e<r.length;e++)r[e].textContent=R[e]};const l=localStorage.getItem("allTasks"),c=localStorage.getItem("importantTasks"),u=localStorage.getItem("completedTasks"),d=localStorage.getItem("allNotes"),m=localStorage.getItem("allLists"),f=localStorage.getItem("currentArrNums"),v=localStorage.getItem("customListArrNumbers"),h=localStorage.getItem("customNumStorage"),p=localStorage.getItem("allTasksTitles"),y=localStorage.getItem("allNotesTitles"),g=localStorage.getItem("allListTitles");let w,k=l?JSON.parse(l):[],S=p?JSON.parse(p):[],b=g?JSON.parse(g):[],T=y?JSON.parse(y):[],C=[],q=[],x=[],L=f?JSON.parse(f):[],D=[],E=c?JSON.parse(c):[],M=d?JSON.parse(d):[],N=u?JSON.parse(u):[],O=m?JSON.parse(m):[],A=[],Y=[],I=[],j=[],H=[],U=[],F=[],W=[],P=[],R=v?JSON.parse(v):[],Q=h?JSON.parse(h):[];const B=document.querySelector(".todos"),X=document.querySelector(".projects"),$=document.querySelector(".wrapper"),J=document.querySelector(".todo-setter-accept button"),z=document.querySelector(".todo-editor-accept button"),G=document.querySelector(".note-editor-accept-button"),_=document.querySelector(".fa-pen-to-square"),V=document.querySelector(".note-setter-accept-button"),Z=document.querySelector(".project-setter-accept-button"),K=document.querySelector(".button-bar button"),ee=document.querySelector(".all-count p"),te=document.querySelector(".important-count p"),ne=document.querySelector(".notes-count p"),re=document.querySelector(".completed-count p"),ae=document.querySelector(".today-count p"),oe=document.querySelector(".week-count p"),ie=document.querySelector("#projects_input"),se=document.querySelector("#projects_input_edit"),le=document.querySelector("#list-removal"),ce=document.querySelector(".category-name h2"),ue=document.querySelector(".important"),de=document.querySelector(".all"),me=document.querySelector(".completed"),fe=document.querySelector(".notes"),ve=document.querySelector(".today"),he=document.querySelector(".week"),pe=document.querySelector(".creator-menu-mobile"),ye=document.querySelector(".todo-create-mobile"),ge=document.querySelector(".project-create-mobile"),we=document.querySelector(".note-create-mobile"),ke=document.querySelector(".todo-create-mobile p"),Se=document.querySelector(".project-create-mobile p"),be=document.querySelector(".note-create-mobile p");function Te(e,t,n,r,a){this.title=e,this.details=t,this.project=n,this.date=r,this.importance=a}function Ce(e,t){this.title=e,this.details=t}function qe(e,t){this.title=e,this.color=t}function xe(){R=[];const e=document.querySelectorAll(".project-count p");for(let t=0;t<e.length;t++)R.push(e[t].textContent);s()}function Le(){const e=k.length+M.length+E.length;ee.textContent=e;const t=E.length;te.textContent=t;const n=M.length;ne.textContent=n;const r=N.length;re.textContent=r;const a=C.length+q.length;ae.textContent=a;const o=D.length+x.length;oe.textContent=o,s()}function De(){for(let e=0;e<C.length;e++){B.appendChild(document.createElement("div")).classList.add("task","item","not-important");const t=B.querySelectorAll(".not-important");t[e].appendChild(document.createElement("div")).classList.add("task-status"),t[e].appendChild(document.createElement("div")).classList.add("task-text"),t[e].appendChild(document.createElement("div")).classList.add("task-importance"),t[e].querySelector(".task-status").appendChild(document.createElement("label"));const n=t[e].querySelector(".task-status label");n.appendChild(document.createElement("div")).classList.add("check-icon"),n.classList.add("round","not-important-round"),document.querySelector(".check-icon").classList.add("round","not-important-round");const r=t[e].querySelector(".task-text");r.appendChild(document.createElement("div")).classList.add("task-heading"),r.appendChild(document.createElement("div")).classList.add("task-category"),t[e].querySelector(".task-heading").appendChild(document.createElement("h2")).textContent=C[e].title,r.querySelector(".task-category").appendChild(document.createElement("p")).textContent="Tasks",t[e].querySelector(".task-importance").appendChild(document.createElement("i")).classList.add("fa-solid","fa-star")}const e=B.querySelectorAll(".not-important");for(let t=0;t<e.length;t++)e[t].setAttribute("data-card",j[t]),e[t].querySelectorAll(".task-status, .not-important-round, .fa-star, .task-heading, .task-category, .task-heading h2, .task-category p, .task-text, .task-importance").forEach((e=>{e.setAttribute("data-card",j[t])}));Le(),Be()}function Ee(){for(let e=0;e<x.length;e++){B.appendChild(document.createElement("div")).classList.add("task","item","not-important");const t=B.querySelectorAll(".not-important");t[e].appendChild(document.createElement("div")).classList.add("task-status"),t[e].appendChild(document.createElement("div")).classList.add("task-text"),t[e].appendChild(document.createElement("div")).classList.add("task-importance"),t[e].querySelector(".task-status").appendChild(document.createElement("label"));const n=t[e].querySelector(".task-status label");n.appendChild(document.createElement("div")).classList.add("check-icon"),n.classList.add("round","not-important-round"),document.querySelector(".check-icon").classList.add("round","not-important-round");const r=t[e].querySelector(".task-text");r.appendChild(document.createElement("div")).classList.add("task-heading"),r.appendChild(document.createElement("div")).classList.add("task-category"),t[e].querySelector(".task-heading").appendChild(document.createElement("h2")).textContent=x[e].title,r.querySelector(".task-category").appendChild(document.createElement("p")).textContent="Tasks",t[e].querySelector(".task-importance").appendChild(document.createElement("i")).classList.add("fa-solid","fa-star")}const e=B.querySelectorAll(".not-important");for(let t=0;t<e.length;t++)e[t].setAttribute("data-card",H[t]),e[t].querySelectorAll(".task-status, .not-important-round, .fa-star, .task-heading, .task-category, .task-heading h2, .task-category p, .task-text, .task-importance").forEach((e=>{e.setAttribute("data-card",H[t])}));Le(),Be()}function Me(){for(let e=0;e<q.length;e++){B.appendChild(document.createElement("div")).classList.add("task","item","important-task");const t=B.querySelectorAll(".important-task");t[e].appendChild(document.createElement("div")).classList.add("task-status"),t[e].appendChild(document.createElement("div")).classList.add("task-text"),t[e].appendChild(document.createElement("div")).classList.add("task-importance"),t[e].querySelector(".task-status").appendChild(document.createElement("label"));const n=t[e].querySelector(".task-status label");n.appendChild(document.createElement("div")).classList.add("check-icon"),n.classList.add("round","important-round"),document.querySelector(".check-icon").classList.add("round","important-round");const r=t[e].querySelector(".task-text");r.appendChild(document.createElement("div")).classList.add("task-heading"),r.appendChild(document.createElement("div")).classList.add("task-category"),t[e].querySelector(".task-heading").appendChild(document.createElement("h2")).textContent=q[e].title,r.querySelector(".task-category").appendChild(document.createElement("p")).textContent="Tasks",t[e].querySelector(".task-importance").appendChild(document.createElement("i")).classList.add("fa-solid","fa-star")}const e=B.querySelectorAll(".important-task");for(let t=0;t<e.length;t++)e[t].setAttribute("data-card",U[t]),e[t].querySelectorAll(".task-status, .round, .fa-star, .task-heading, .task-category, .task-heading h2, .task-category p, .task-text, .task-importance").forEach((e=>{e.setAttribute("data-card",U[t])}));Be(),Le()}function Ne(){for(let e=0;e<D.length;e++){B.appendChild(document.createElement("div")).classList.add("task","item","important-task");const t=B.querySelectorAll(".important-task");t[e].appendChild(document.createElement("div")).classList.add("task-status"),t[e].appendChild(document.createElement("div")).classList.add("task-text"),t[e].appendChild(document.createElement("div")).classList.add("task-importance"),t[e].querySelector(".task-status").appendChild(document.createElement("label"));const n=t[e].querySelector(".task-status label");n.appendChild(document.createElement("div")).classList.add("check-icon"),n.classList.add("round","important-round"),document.querySelector(".check-icon").classList.add("round","important-round");const r=t[e].querySelector(".task-text");r.appendChild(document.createElement("div")).classList.add("task-heading"),r.appendChild(document.createElement("div")).classList.add("task-category"),t[e].querySelector(".task-heading").appendChild(document.createElement("h2")).textContent=D[e].title,r.querySelector(".task-category").appendChild(document.createElement("p")).textContent="Tasks",t[e].querySelector(".task-importance").appendChild(document.createElement("i")).classList.add("fa-solid","fa-star")}const e=B.querySelectorAll(".important-task");for(let t=0;t<e.length;t++)e[t].setAttribute("data-card",F[t]),e[t].querySelectorAll(".task-status, .round, .fa-star, .task-heading, .task-category, .task-heading h2, .task-category p, .task-text, .task-importance").forEach((e=>{e.setAttribute("data-card",F[t])}));Le(),Be()}function Oe(){Le(),function(){U=[],q=[];for(let n=0;n<E.length;n++){const r=E[n].date,a=new Date,o=t(r);if(e(o,a)){q.push(E[n]);const e=n;U.push(e)}}Le(),Be(),s()}(),function(){j=[],C=[];for(let n=0;n<k.length;n++){const r=k[n].date,a=new Date,o=t(r);if(e(o,a)){C.push(k[n]);const e=n;j.push(e)}}Le(),Be(),s()}(),function(){F=[],D=[];for(let e=0;e<E.length;e++){const n=E[e].date,a=new Date,o=t(n);if(r(o,a)<8){D.push(E[e]);const t=e;F.push(t)}}Le(),Be(),s()}(),function(){H=[],x=[];for(let e=0;e<k.length;e++){const n=k[e].date,a=new Date,o=t(n);if(r(o,a)<8){x.push(k[e]);const t=e;H.push(t)}}Le(),Be(),s()}(),Be(),s()}function Ae(){const e=B.querySelectorAll(".not-important");for(let t=0;t<=e.length-1;t++)e[t].setAttribute("data-card",[t]),e[t].querySelectorAll(".task-status, .not-important-round, .fa-star, .task-heading, .task-category, .task-heading h2, .task-category p, .task-text, .task-importance").forEach((e=>{e.setAttribute("data-card",[t])}))}function Ye(){const e=B.querySelectorAll(".note");for(let t=0;t<=e.length-1;t++)e[t].setAttribute("data-card",[t]),e[t].querySelectorAll(".note-status, .note-icon, .note-heading, .note-category, .note-heading h2, .note-category p, .note-text, .note-importance").forEach((e=>{e.setAttribute("data-card",[t])}))}function Ie(){const e=X.querySelectorAll(".project-list");for(let t=0;t<=e.length-1;t++)e[t].setAttribute("data-card",[t])}function je(){const e=B.querySelectorAll(".important-task");for(let t=0;t<=e.length-1;t++)e[t].setAttribute("data-card",[t]),e[t].querySelectorAll(".task-status, .round, .fa-star, .task-heading, .task-category, .task-heading h2, .task-category p, .task-text, .task-importance").forEach((e=>{e.setAttribute("data-card",[t])}))}function He(){const e=B.querySelectorAll(".completed-task");for(let t=0;t<=e.length-1;t++)e[t].setAttribute("data-card",[t]),e[t].querySelectorAll(".task-status, .round, .fa-star, .task-heading, .task-category, .task-heading h2, .task-category p, .task-text, .task-importance").forEach((e=>{e.setAttribute("data-card",[t])}))}function Ue(){const e=document.getElementById("projects_input").querySelectorAll(".list-item");for(let t=0;t<e.length;t++)e[t].setAttribute("list-attribute",[t])}function Fe(){for(let e=0;e<E.length;e++){B.appendChild(document.createElement("div")).classList.add("task","item","important-task");const t=B.querySelectorAll(".important-task");t[e].appendChild(document.createElement("div")).classList.add("task-status"),t[e].appendChild(document.createElement("div")).classList.add("task-text"),t[e].appendChild(document.createElement("div")).classList.add("task-importance"),t[e].querySelector(".task-status").appendChild(document.createElement("label"));const n=t[e].querySelector(".task-status label");n.appendChild(document.createElement("div")).classList.add("check-icon"),n.classList.add("round","important-round"),document.querySelector(".check-icon").classList.add("round","important-round");const r=t[e].querySelector(".task-text");r.appendChild(document.createElement("div")).classList.add("task-heading"),r.appendChild(document.createElement("div")).classList.add("task-category"),t[e].querySelector(".task-heading").appendChild(document.createElement("h2")).textContent=E[e].title,r.querySelector(".task-category").appendChild(document.createElement("p")).textContent="Tasks",t[e].querySelector(".task-importance").appendChild(document.createElement("i")).classList.add("fa-solid","fa-star"),je()}Be()}function We(){for(let e=0;e<N.length;e++){B.appendChild(document.createElement("div")).classList.add("task","item","completed-task");const t=B.querySelectorAll(".completed-task");t[e].appendChild(document.createElement("div")).classList.add("task-status"),t[e].appendChild(document.createElement("div")).classList.add("task-text"),t[e].appendChild(document.createElement("div")).classList.add("task-importance"),t[e].querySelector(".task-status").appendChild(document.createElement("label"));const n=t[e].querySelector(".task-status label");n.appendChild(document.createElement("div")).classList.add("check-icon"),n.classList.add("round");const r=t[e].querySelector(".check-icon");r.classList.add("round");const a=t[e].querySelector(".task-status label");r.style.display="block",a.style.animation="none",a.style.borderColor="#5cb85c",a.style.backgroundColor="black";const o=t[e].querySelector(".task-text");o.appendChild(document.createElement("div")).classList.add("task-heading"),o.appendChild(document.createElement("div")).classList.add("task-category"),t[e].querySelector(".task-heading").appendChild(document.createElement("h2")).textContent=N[e].title,o.querySelector(".task-category").appendChild(document.createElement("p")).textContent="Tasks",t[e].querySelector(".task-importance").appendChild(document.createElement("i")).classList.add("fa-solid","fa-star"),He()}Be()}function Pe(){for(let e=0;e<k.length;e++){B.appendChild(document.createElement("div")).classList.add("task","item","not-important");const t=B.querySelectorAll(".not-important");t[e].appendChild(document.createElement("div")).classList.add("task-status"),t[e].appendChild(document.createElement("div")).classList.add("task-text"),t[e].appendChild(document.createElement("div")).classList.add("task-importance"),t[e].querySelector(".task-status").appendChild(document.createElement("label"));const n=t[e].querySelector(".task-status label");n.appendChild(document.createElement("div")).classList.add("check-icon"),n.classList.add("round","not-important-round"),document.querySelector(".check-icon").classList.add("round","not-important-round");const r=t[e].querySelector(".task-text");r.appendChild(document.createElement("div")).classList.add("task-heading"),r.appendChild(document.createElement("div")).classList.add("task-category"),t[e].querySelector(".task-heading").appendChild(document.createElement("h2")).textContent=k[e].title,r.querySelector(".task-category").appendChild(document.createElement("p")).textContent="Tasks",t[e].querySelector(".task-importance").appendChild(document.createElement("i")).classList.add("fa-solid","fa-star"),Ae()}Be()}function Re(){for(let e=0;e<O.length;e++){X.appendChild(document.createElement("div")).classList.add("project-list");const t=X.querySelectorAll(".project-list");t[e].appendChild(document.createElement("div")).classList.add("project-color"),t[e].appendChild(document.createElement("div")).classList.add("project-name"),t[e].appendChild(document.createElement("div")).classList.add("project-count"),t[e].querySelector(".project-color").appendChild(document.createElement("div")),t[e].querySelector(".project-color div").style.backgroundColor=O[e].color,t[e].querySelector(".project-name").appendChild(document.createElement("h2")).textContent=O[e].title,t[e].querySelector(".project-count").appendChild(document.createElement("p")).textContent=0,Ie()}!function(){let e=document.querySelectorAll(".project-count p");for(let t=0;t<e.length;t++)e[t].textContent=L[t];e=[],L=[],s()}(),Be()}function Qe(){for(let e=0;e<M.length;e++){B.appendChild(document.createElement("div")).classList.add("note","item");const t=B.querySelectorAll(".note");t[e].appendChild(document.createElement("div")).classList.add("note-status"),t[e].appendChild(document.createElement("div")).classList.add("note-text"),t[e].appendChild(document.createElement("div")).classList.add("note-importance"),t[e].querySelector(".note-status").appendChild(document.createElement("div")).classList.add("note-icon"),t[e].querySelector(".note-icon").appendChild(document.createElement("i")).classList.add("fa-solid","fa-note-sticky");const n=t[e].querySelector(".note-text");n.appendChild(document.createElement("div")).classList.add("note-heading"),n.appendChild(document.createElement("div")).classList.add("note-category"),t[e].querySelector(".note-heading").appendChild(document.createElement("h2")).textContent=M[e].title,n.querySelector(".note-category").appendChild(document.createElement("p")).textContent="Notes",Ye()}}function Be(){const e=document.querySelectorAll(".item");for(let t=0;t<e.length;t++)e[t].setAttribute("data-item",`${t}`)}function Xe(e){Y=[],I=[],W=[],P=[];for(let t=0;t<k.length;t++)if(k[t].project.replace(/[ .]/g,"")===e){Y.push(k[t]);const e=t;I.push(e)}for(let t=0;t<E.length;t++)if(E[t].project.replace(/[ .]/g,"")===e){P.push(E[t]);const e=t;W.push(e)}!function(){for(let e=0;e<P.length;e++){B.appendChild(document.createElement("div")).classList.add("task","item","important-task");const t=B.querySelectorAll(".important-task");t[e].appendChild(document.createElement("div")).classList.add("task-status"),t[e].appendChild(document.createElement("div")).classList.add("task-text"),t[e].appendChild(document.createElement("div")).classList.add("task-importance"),t[e].querySelector(".task-status").appendChild(document.createElement("label"));const n=t[e].querySelector(".task-status label");n.appendChild(document.createElement("div")).classList.add("check-icon"),n.classList.add("round","not-important-round"),document.querySelector(".check-icon").classList.add("round","not-important-round");const r=t[e].querySelector(".task-text");r.appendChild(document.createElement("div")).classList.add("task-heading"),r.appendChild(document.createElement("div")).classList.add("task-category"),t[e].querySelector(".task-heading").appendChild(document.createElement("h2")).textContent=P[e].title,r.querySelector(".task-category").appendChild(document.createElement("p")).textContent="Tasks",t[e].querySelector(".task-importance").appendChild(document.createElement("i")).classList.add("fa-solid","fa-star")}const e=B.querySelectorAll(".important-task");for(let t=0;t<e.length;t++)e[t].setAttribute("data-card",W[t]),e[t].querySelectorAll(".task-status, .round, .fa-star, .task-heading, .task-category, .task-heading h2, .task-category p, .task-text, .task-importance").forEach((e=>{e.setAttribute("data-card",W[t])}))}(),function(){for(let e=0;e<Y.length;e++){B.appendChild(document.createElement("div")).classList.add("task","item","not-important");const t=B.querySelectorAll(".not-important");t[e].appendChild(document.createElement("div")).classList.add("task-status"),t[e].appendChild(document.createElement("div")).classList.add("task-text"),t[e].appendChild(document.createElement("div")).classList.add("task-importance"),t[e].querySelector(".task-status").appendChild(document.createElement("label"));const n=t[e].querySelector(".task-status label");n.appendChild(document.createElement("div")).classList.add("check-icon"),n.classList.add("round","not-important-round"),document.querySelector(".check-icon").classList.add("round","not-important-round");const r=t[e].querySelector(".task-text");r.appendChild(document.createElement("div")).classList.add("task-heading"),r.appendChild(document.createElement("div")).classList.add("task-category"),t[e].querySelector(".task-heading").appendChild(document.createElement("h2")).textContent=Y[e].title,r.querySelector(".task-category").appendChild(document.createElement("p")).textContent="Tasks",t[e].querySelector(".task-importance").appendChild(document.createElement("i")).classList.add("fa-solid","fa-star")}const e=B.querySelectorAll(".not-important");for(let t=0;t<e.length;t++)e[t].setAttribute("data-card",I[t]),e[t].querySelectorAll(".task-status, .not-important-round, .fa-star, .task-heading, .task-category, .task-heading h2, .task-category p, .task-text, .task-importance").forEach((e=>{e.setAttribute("data-card",I[t])}));Be()}(),Be()}function $e(){Lt(),B.innerHTML="",Fe(),Pe(),Qe(),Oe(),Le(),Be(),ce.textContent="All Entries",s()}function Je(){L=[];const e=document.querySelectorAll(".project-count p");for(let t=0;t<e.length;t++)L.push(e[t].textContent);X.innerHTML="",Re(),Be(),s()}function ze(){B.innerHTML="",Fe(),Pe(),Qe(),We(),Oe(),Le(),Be(),s()}function Ge(){B.innerHTML="",Fe(),Oe(),Le(),Be(),ce.textContent="Important Tasks",s()}function _e(){B.innerHTML="",Qe(),Oe(),Be(),Le(),ce.textContent="All Notes",s()}function Ve(){B.innerHTML="",We(),Oe();for(let e=0;e<N.length;e++)"important"===N[e].importance&&(B.querySelectorAll(".completed-task")[e].querySelector(".fa-star").style.color="yellow");Le(),Be(),ce.textContent="Completed Tasks",s()}function Ze(){const e=document.querySelector(".task-details");setTimeout((()=>{$.classList.remove("details")}),250),e.classList.remove("active-task-details"),document.querySelector(".mobile-adder").style.display="flex",s()}function Ke(e,t,n,r,a,o){k.push(new Te(e,t,n,r,a,o)),s(),function(e){for(let t=e-1;t<k.length;t++){B.appendChild(document.createElement("div")).classList.add("task","item","not-important");const e=B.querySelectorAll(".not-important");e[t].appendChild(document.createElement("div")).classList.add("task-status"),e[t].appendChild(document.createElement("div")).classList.add("task-text"),e[t].appendChild(document.createElement("div")).classList.add("task-importance"),e[t].querySelector(".task-status").appendChild(document.createElement("label"));const n=e[t].querySelector(".task-status label");n.appendChild(document.createElement("div")).classList.add("check-icon"),n.classList.add("round","not-important-round"),document.querySelector(".check-icon").classList.add("round","not-important-round");const r=e[t].querySelector(".task-text");r.appendChild(document.createElement("div")).classList.add("task-heading"),r.appendChild(document.createElement("div")).classList.add("task-category"),e[t].querySelector(".task-heading").appendChild(document.createElement("h2")).textContent=k[t].title,r.querySelector(".task-category").appendChild(document.createElement("p")).textContent="Tasks",e[t].querySelector(".task-importance").appendChild(document.createElement("i")).classList.add("fa-solid","fa-star"),Le(),Ae()}}(k.length),S=[]}function et(e,t){M.push(new Ce(e,t)),s(),function(e){for(let t=e-1;t<M.length;t++){B.appendChild(document.createElement("div")).classList.add("note","item");const e=B.querySelectorAll(".note");e[t].appendChild(document.createElement("div")).classList.add("note-status"),e[t].appendChild(document.createElement("div")).classList.add("note-text"),e[t].appendChild(document.createElement("div")).classList.add("note-importance"),e[t].querySelector(".note-status").appendChild(document.createElement("div")).classList.add("note-icon"),e[t].querySelector(".note-icon").appendChild(document.createElement("i")).classList.add("fa-solid","fa-note-sticky");const n=e[t].querySelector(".note-text");n.appendChild(document.createElement("div")).classList.add("note-heading"),n.appendChild(document.createElement("div")).classList.add("note-category"),e[t].querySelector(".note-heading").appendChild(document.createElement("h2")).textContent=M[t].title,n.querySelector(".note-category").appendChild(document.createElement("p")).textContent="Notes",Le(),Ye()}}(M.length)}function tt(e,t,n,r,a,o){E.push(new Te(e,t,n,r,a,o)),s(),function(e){for(let t=e-1;t<E.length;t++){B.appendChild(document.createElement("div")).classList.add("task","item","important-task");const e=B.querySelectorAll(".important-task");e[t].appendChild(document.createElement("div")).classList.add("task-status"),e[t].appendChild(document.createElement("div")).classList.add("task-text"),e[t].appendChild(document.createElement("div")).classList.add("task-importance"),e[t].querySelector(".task-status").appendChild(document.createElement("label"));const n=e[t].querySelector(".task-status label");n.appendChild(document.createElement("div")).classList.add("check-icon"),n.classList.add("round","important-round"),document.querySelector(".check-icon").classList.add("round","important-round");const r=e[t].querySelector(".task-text");r.appendChild(document.createElement("div")).classList.add("task-heading"),r.appendChild(document.createElement("div")).classList.add("task-category"),e[t].querySelector(".task-heading").appendChild(document.createElement("h2")).textContent=E[t].title,r.querySelector(".task-category").appendChild(document.createElement("p")).textContent="Tasks",e[t].querySelector(".task-importance").appendChild(document.createElement("i")).classList.add("fa-solid","fa-star"),Le(),je()}}(E.length),S=[]}function nt(e,t){O.push(new qe(e,t)),function(e){for(let t=e-1;t<O.length;t++){X.appendChild(document.createElement("div")).classList.add("project-list");const e=X.querySelectorAll(".project-list");e[t].appendChild(document.createElement("div")).classList.add("project-color"),e[t].appendChild(document.createElement("div")).classList.add("project-name"),e[t].appendChild(document.createElement("div")).classList.add("project-count"),e[t].querySelector(".project-color").appendChild(document.createElement("div")),e[t].querySelector(".project-color div").style.backgroundColor=O[t].color,e[t].querySelector(".project-name").appendChild(document.createElement("h2")).textContent=O[t].title,e[t].querySelector(".project-count").appendChild(document.createElement("p")).textContent=0,Ie()}}(O.length),s(),b=[]}function rt(){const e=document.querySelector(".wrapper");e.classList.add("disable-pointer-events"),setTimeout((()=>{e.classList.remove("disable-pointer-events")}),1500)}function at(e){const t=document.querySelectorAll(".item");console.log(e);for(let n=0;n<t.length;n++)n>e&&(t[n].classList.add("animate-up"),setTimeout((()=>{t[n].classList.remove("animate-up")}),1500))}ue.addEventListener("click",(()=>{Dt(),Ge(),Ze()})),ve.addEventListener("click",(()=>{xt(),B.innerHTML="",Ze(),Oe(),Me(),De(),ce.textContent="Today's Tasks"})),he.addEventListener("click",(()=>{Dt(),B.innerHTML="",Ze(),Oe(),Ne(),Ee(),ce.textContent="Week's Tasks"})),de.addEventListener("click",(()=>{Lt(),$e(),Ze()})),me.addEventListener("click",(()=>{Dt(),Ve(),Ze()})),fe.addEventListener("click",(()=>{Dt(),_e(),Ze()})),J.addEventListener("click",(e=>{e.preventDefault(),mt.classList.remove("menu-active"),document.querySelector(".creator-menu-mobile").classList.remove("active-menu-mobile"),document.querySelector(".mobile-adder i").classList.remove("rotated"),ye.classList.remove("active-todo-mobile"),ge.classList.remove("active-project-mobile"),we.classList.remove("active-note-mobile"),ke.classList.remove("options-appear"),Se.classList.remove("options-appear"),be.classList.remove("options-appear"),$e(),document.querySelectorAll(".todo-setter-form input").forEach((e=>{e.checkValidity(),e.reportValidity()}));const n=document.querySelector(".todo-setter-title-input input"),a=document.querySelector(".todo-setter-details-input textarea"),o=document.querySelector(".todo-setter-projects-input select"),s=document.querySelector(".todo-setter-date-input input"),l=document.querySelector(".container input"),c=document.querySelector(".container-phone input");function u(){document.querySelector(".creator-menu").classList.remove("active-menu"),document.querySelector(".todo-setter").classList.remove("active-todo-setter"),n.value="",a.value="",s.value="",l.checked=!1,c.checked=!1}function d(e){const t=document.querySelectorAll(".project-list"),n=t[e].querySelector(".project-count p").textContent,r=Number(n)+1;t[e].querySelector(".project-count p").textContent=r}if(""===n.value);else if(!0===l.checked||!0===c.checked){l.value="important",c.value="important";const e=s.value,m=new Date,f=t(e);if(r(f,m)<0)i("The due date is older than the current date.");else if(S.length>0){const e=n.value;if(S.some((t=>t===e)))i("This task already exists.");else{if("none"!==o.value){const e=o.value.replace(/\s/g,"");for(let t=0;t<O.length;t++)if(O[t].title.replace(/\s/g,"")===e){d(t);break}}tt(n.value,a.value,o.value,s.value,l.value);for(let e=0;e<E.length;e++)S.push(E[e].title);for(let e=0;e<k.length;e++)S.push(k[e].title);Oe(),Le(),u()}}else{if("none"!==o.value){const e=o.value.replace(/\s/g,"");for(let t=0;t<O.length;t++)if(O[t].title.replace(/\s/g,"")===e){d(t);break}}tt(n.value,a.value,o.value,s.value,l.value,c.value);for(let e=0;e<E.length;e++)S.push(E[e].title);for(let e=0;e<k.length;e++)S.push(k[e].title);Oe(),Le(),u()}}else if(!1===l.checked||!1===c.checked){l.value="not-important",c.value="not-important";const e=s.value,m=new Date,f=t(e);if(r(f,m)<0)i("The due date is older than the current date.");else if(S.length>0){const e=n.value;if(S.some((t=>t===e)))i("This task already exists.");else{if("none"!==o.value){const e=o.value.replace(/\s/g,"");for(let t=0;t<O.length;t++)if(O[t].title.replace(/\s/g,"")===e){d(t);break}}Ke(n.value,a.value,o.value,s.value,l.value,c.value);for(let e=0;e<E.length;e++)S.push(E[e].title);for(let e=0;e<k.length;e++)S.push(k[e].title);Oe(),Le(),u()}}else{if("none"!==o.value){const e=o.value.replace(/\s/g,"");for(let t=0;t<O.length;t++)if(O[t].title.replace(/\s/g,"")===e){d(t);break}}Ke(n.value,a.value,o.value,s.value,l.value,c.value);for(let e=0;e<E.length;e++)S.push(E[e].title);for(let e=0;e<k.length;e++)S.push(k[e].title);Oe(),Le(),u()}}xe()}));const ot={},it={};function st(){const e=document.querySelectorAll(".project-name h2");b=[];for(let t=0;t<e.length;t++)b.push(e[t].textContent);ie.innerHTML="",se.innerHTML="",le.innerHTML="";const t=document.createElement("option"),n=document.createElement("option"),r=document.createElement("option");t.value="none",t.textContent="none",n.value="none",n.textContent="none",r.value="none",r.textContent="none",ie.appendChild(t),se.appendChild(n),le.appendChild(r),A=[];for(let e=0;e<b.length;e++)A.push(b[e]);for(let e=0;e<A.length;e++){const t=document.createElement("option"),n=document.createElement("option"),r=document.createElement("option");t.classList.add("list-item"),t.text=A[e],n.text=A[e],r.text=A[e],ie.add(t),se.add(n),le.add(r)}Ue(),Je()}function lt(){"All Entries"===ce.textContent?$e():"Important Tasks"===ce.textContent?Ge():"All Notes"===ce.textContent?_e():"Week's Tasks"===ce.textContent?(B.innerHTML="",Oe(),Ne(),Ee()):"Today's Tasks"===ce.textContent?(B.innerHTML="",Oe(),Me(),De()):"Completed Tasks"===ce.textContent?(B.innerHTML="",Ve()):(B.innerHTML="",Xe(ce.textContent.replace(/[ .]/g,"")))}function ct(e){Le();const t=document.querySelectorAll(".project-list"),n=t[e].querySelector(".project-count p").textContent,r=Number(n)-1;t[e].querySelector(".project-count p").textContent=r}_.addEventListener("click",(()=>{if(Ze(),"Notes"===document.querySelector(".details-list p").textContent){const e=document.querySelector(".note-editor-title-input input"),t=document.querySelector(".note-editor-details-input textarea"),n=document.querySelector(".details-info-heading-text h2").textContent,r=document.querySelector(".details-info-details-text p").textContent;e.value=n,t.value="This note has no description"===r?"":r,function(e,t){it.title=e,it.details=t,G.addEventListener("click",(e=>{e.stopPropagation(),e.stopImmediatePropagation(),e.preventDefault();const t=document.querySelector(".note-editor-title-input input"),n=document.querySelector(".note-editor-details-input textarea");$e(),document.querySelectorAll(".note-editor-form input").forEach((e=>{e.checkValidity(),e.reportValidity()}));const r=[];for(let e=0;e<M.length;e++)r.push(M[e].title);const a=r.map((e=>e.replace(/\s/g,""))),o=it.title.replace(/\s/g,""),i=a.includes(o),s=a.findIndex((e=>e===o));var l;i&&(""===t.value||(M[l=s].title=t.value,M[l].details=n.value,Ze(),document.querySelector(".creator-menu").classList.remove("active-menu"),document.querySelector(".note-editor").classList.remove("active-note-editor"),t.value="",n.value="")),$e()}))}(n,r)}else{const e=document.querySelector(".todo-editor-title-input input"),n=document.querySelector(".todo-editor-details-input textarea"),a=document.querySelector(".todo-editor-projects-input select"),o=document.querySelector(".todo-editor-date-input input"),s=document.querySelector(".container-edit input"),l=document.querySelector(".container-edit-phone input"),c=document.querySelector(".details-info-heading-text h2").textContent,u=document.querySelector(".details-info-details-text p").textContent,d=document.querySelector(".details-info-date-number p").textContent,m=document.querySelector(".details-info-status-text p").textContent,f=document.querySelector(".details-info-importance-text p").textContent,v=document.querySelector(".details-list p").textContent;e.value=c,n.value="This task has no description"===u?"":u,o.value="The date has not been set"===d?"":d,"Not important task"===f?(s.checked=!1,l.checked=!1):(s.checked=!0,l.checked=!0),a.value="All Entries"===v?"none":v,function(e,n,a,o,s,l){ot.title=e,ot.details=n,ot.dueDate=a,ot.importance=o,ot.project=s,ot.status=l,z.addEventListener("click",(e=>{e.stopPropagation(),e.stopImmediatePropagation(),e.preventDefault(),$e(),document.querySelectorAll(".todo-editor-form input").forEach((e=>{e.checkValidity(),e.reportValidity()}));const n=document.querySelector(".todo-editor-title-input input"),a=document.querySelector(".todo-editor-details-input textarea"),o=document.querySelector(".todo-editor-projects-input select"),s=document.querySelector(".todo-editor-date-input input"),l=document.querySelector(".container-edit input"),c=document.querySelector(".container-edit-phone input");function u(){document.querySelector(".creator-menu").classList.remove("active-menu"),document.querySelector(".todo-editor").classList.remove("active-todo-editor"),n.value="",a.value="",s.value="",l.checked=!1,c.checked=!1}function d(e){const t=document.querySelectorAll(".project-list"),n=t[e].querySelector(".project-count p").textContent,r=Number(n)+1;t[e].querySelector(".project-count p").textContent=r}function m(e){if(k[e].title=n.value,k[e].details=a.value,k[e].date=s.value,"All Entries"===ot.project&&"none"===o.value)k[e].project="none";else if("All Entries"===ot.project&&"none"!==o.value){k[e].project=o.value;const t=o.value.replace(/\s/g,""),n=[];for(let e=0;e<O.length;e++){const t=O[e].title.replace(/\s/g,"");n.push(t)}const r=n.includes(t),a=n.findIndex((e=>e===t));r&&d(a)}else if("All Entries"!==ot.project&&"none"!==o.value&&ot.project!==o.value){const t=ot.project.replace(/\s/g,""),n=o.value.replace(/\s/g,""),r=[];for(let e=0;e<O.length;e++){const t=O[e].title.replace(/\s/g,"");r.push(t)}const a=r.includes(t),i=r.findIndex((e=>e===t)),s=r.includes(n),l=r.findIndex((e=>e===n));a&&ct(i),s&&d(l),k[e].project=o.value}else if("All Entries"!==ot.project&&"none"===o.value){const t=ot.project.replace(/\s/g,""),n=[];for(let e=0;e<O.length;e++){const t=O[e].title.replace(/\s/g,"");n.push(t)}const r=n.includes(t),a=n.findIndex((e=>e===t));r&&ct(a),k[e].project="none"}!0===l.checked||!0===c.checked?(k[e].importance="important",E.push(k[e]),k.splice(e,1)):k[e].importance="not-important",lt(),u(),Ze()}function f(e){if(E[e].title=n.value,E[e].details=a.value,E[e].date=s.value,"All Entries"===ot.project&&"none"===o.value)E[e].project="none";else if("All Entries"===ot.project&&"none"!==o.value){E[e].project=o.value;const t=o.value.replace(/\s/g,""),n=[];for(let e=0;e<O.length;e++){const t=O[e].title.replace(/\s/g,"");n.push(t)}const r=n.includes(t),a=n.findIndex((e=>e===t));r&&d(a)}else if("All Entries"!==ot.project&&"none"!==o.value&&ot.project!==o.value){const t=ot.project.replace(/\s/g,""),n=o.value.replace(/\s/g,""),r=[];for(let e=0;e<O.length;e++){const t=O[e].title.replace(/\s/g,"");r.push(t)}const a=r.includes(t),i=r.findIndex((e=>e===t)),s=r.includes(n),l=r.findIndex((e=>e===n));a&&ct(i),s&&d(l),E[e].project=o.value}else if("All Entries"!==ot.project&&"none"===o.value){const t=ot.project.replace(/\s/g,""),n=[];for(let e=0;e<O.length;e++){const t=O[e].title.replace(/\s/g,"");n.push(t)}const r=n.includes(t),a=n.findIndex((e=>e===t));r&&ct(a),E[e].project="none"}!1===l.checked||!1===c.checked?(E[e].importance="not-important",k.push(E[e]),E.splice(e,1)):E[e].importance="important",lt(),u(),Ze()}if(""===n.value);else if(""===s.value)if("Not important task"===ot.importance){const e=[];for(let t=0;t<k.length;t++)e.push(k[t].title);const t=e.map((e=>e.replace(/\s/g,""))),n=ot.title.replace(/\s/g,""),r=t.includes(n),a=t.findIndex((e=>e===n));r&&m(a)}else{const e=[];for(let t=0;t<E.length;t++)e.push(E[t].title);const t=e.map((e=>e.replace(/\s/g,""))),n=ot.title.replace(/\s/g,""),r=t.includes(n),a=t.findIndex((e=>e===n));r&&f(a)}else{const e=s.value,n=new Date,a=t(e);if(r(a,n)<0)i("The due date is older than the current date.");else if("Not important task"===ot.importance){const e=[];for(let t=0;t<k.length;t++)e.push(k[t].title);const t=e.map((e=>e.replace(/\s/g,""))),n=ot.title.replace(/\s/g,""),r=t.includes(n),a=t.findIndex((e=>e===n));r&&m(a)}else{const e=[];for(let t=0;t<E.length;t++)e.push(E[t].title);const t=e.map((e=>e.replace(/\s/g,""))),n=ot.title.replace(/\s/g,""),r=t.includes(n),a=t.findIndex((e=>e===n));r&&f(a)}}xe()}))}(c,u,d,f,v,m)}xe()})),V.addEventListener("click",(e=>{e.preventDefault(),mt.classList.remove("menu-active"),document.querySelector(".creator-menu-mobile").classList.remove("active-menu-mobile"),document.querySelector(".mobile-adder i").classList.remove("rotated"),ye.classList.remove("active-todo-mobile"),ge.classList.remove("active-project-mobile"),we.classList.remove("active-note-mobile"),ke.classList.remove("options-appear"),Se.classList.remove("options-appear"),be.classList.remove("options-appear"),$e(),document.querySelectorAll(".note-setter-form input").forEach((e=>{e.checkValidity(),e.reportValidity()}));const t=document.querySelector(".note-setter-title-input input"),n=document.querySelector(".note-setter-details-input textarea");if(""===t.value);else if(T.length>0){const e=t.value;if(T.some((t=>t===e)))i("This note already exists");else{et(t.value,n.value);for(let e=0;e<M.length;e++)T.push(M[e].title);document.querySelector(".creator-menu").classList.remove("active-menu"),document.querySelector(".note-setter").classList.remove("active-note-setter"),t.value="",n.value=""}}else{et(t.value,n.value);for(let e=0;e<M.length;e++)T.push(M[e].title);document.querySelector(".creator-menu").classList.remove("active-menu"),document.querySelector(".note-setter").classList.remove("active-note-setter"),t.value="",n.value=""}$e()})),Z.addEventListener("click",(e=>{e.preventDefault(),mt.classList.remove("menu-active"),pe.classList.remove("active-menu-mobile"),document.querySelector(".mobile-adder i").classList.remove("rotated"),ye.classList.remove("active-todo-mobile"),ge.classList.remove("active-project-mobile"),we.classList.remove("active-note-mobile"),ke.classList.remove("options-appear"),Se.classList.remove("options-appear"),be.classList.remove("options-appear"),$e(),document.querySelectorAll(".project-setter-form input").forEach((e=>{e.checkValidity(),e.reportValidity()}));const t=document.querySelector(".project-setter-title-input textarea"),n=document.querySelector(".project-setter-color-input input");if(""===t.value);else if(b.length>0){const e=t.value.replace(/\s/g,"");if(b.map((e=>e.replace(/\s/g,""))).some((t=>t===e)))i("This list already exists");else{nt(t.value,n.value);for(let e=0;e<O.length;e++)b.push(O[e].title);document.querySelector(".creator-menu").classList.remove("active-menu"),document.querySelector(".project-setter").classList.remove("active-project-setter"),t.value="",n.value="#FFFFFF",st()}}else{nt(t.value,n.value);for(let e=0;e<O.length;e++)b.push(O[e].title);st(),document.querySelector(".creator-menu").classList.remove("active-menu"),document.querySelector(".project-setter").classList.remove("active-project-setter"),t.value="",n.value="#FFFFFF"}xe()})),K.addEventListener("click",(e=>{$.style.display="grid";let t=[];e.preventDefault();const n=[],r=[],a=[];dt.classList.remove("active-project-deleter"),mt.style.overflow="visible";const o=le.value.replace(/[ .]/g,"");let i=[];i=[];for(let e=0;e<O.length;e++)i.push(O[e].title);const l=i.map((e=>e.replace(/\s/g,"")));for(let e=0;e<O.length;e++)l[e]===o&&(w=e);for(let e=0;e<k.length;e++)k[e].project.replace(/[ .]/g,"")===o&&t.push(k[e].title);for(let e=0;e<E.length;e++)E[e].project.replace(/[ .]/g,"")===o&&t.push(E[e].title);for(let e=0;e<N.length;e++)N[e].project.replace(/[ .]/g,"")===o&&t.push(N[e].title);for(let e=0;e<k.length;e++)k[e].project.replace(/[ .]/g,"")===o&&r.push(e);for(let e=0;e<E.length;e++)E[e].project.replace(/[ .]/g,"")===o&&n.push(e);for(let e=0;e<N.length;e++)N[e].project.replace(/[ .]/g,"")===o&&a.push(e);for(let e=0;e<O.length;e++)O[e].title.replace(/[ .]/g,"")===o&&(c=e,O.splice(c,1));var c;r.sort(((e,t)=>t-e)).forEach((e=>{k.splice(e,1)})),n.sort(((e,t)=>t-e)).forEach((e=>{E.splice(e,1)})),a.sort(((e,t)=>t-e)).forEach((e=>{N.splice(e,1)}));let u=[];u=[];for(let e=0;e<b.length;e++){const t=b[e].replace(/[ .]/g,"");u.push(t)}const d=u.indexOf(o);b.splice(d,1);let m=t.map((e=>e.replace(/\s/g,""))),f=S.map((e=>e.replace(/\s/g,""))),v=[];for(let e=0;e<m.length;e++)if(f.includes(m[e])){const t=f.indexOf(m[e]);v.push(t)}v.sort(((e,t)=>t-e)).forEach((e=>{S.splice(e,1)})),t=[],m=[],f=[],v=[],function(){L=[];const e=document.querySelectorAll(".project-count p");for(let t=0;t<e.length;t++)L.push(e[t].textContent);L.splice(w,1),X.innerHTML="",Re(),Be(),s()}(),function(){const e=document.querySelectorAll(".project-name h2");b=[];for(let t=0;t<e.length;t++)b.push(e[t].textContent);ie.innerHTML="",se.innerHTML="",le.innerHTML="";const t=document.createElement("option"),n=document.createElement("option"),r=document.createElement("option");t.value="none",t.textContent="none",n.value="none",n.textContent="none",r.value="none",r.textContent="none",ie.appendChild(t),se.appendChild(n),le.appendChild(r),A=[];for(let e=0;e<b.length;e++)A.push(b[e]);for(let e=0;e<A.length;e++){const t=document.createElement("option"),n=document.createElement("option"),r=document.createElement("option");t.classList.add("list-item"),t.text=A[e],n.text=A[e],r.text=A[e],ie.add(t),se.add(n),le.add(r)}Ue()}(),$e(),xe()})),document.addEventListener("click",(e=>{let t=e.target;const n=e.target,r=t.classList,a=[],o=Array.from(r);for(;"HTML"!==t.tagName;){const c=t.classList;if(c.length>0)for(let u=0;u<c.length;u++){const d=c[u];a.includes(d)||a.push(d)}t=t.parentNode}const i=new Audio("audio/apple.mp3");let s=!1;if(o.includes("not-important-round")){Ze(),s&&(i.pause(),i.currentTime=0),i.play(),s=!0;const m=n.getAttribute("data-card"),f=document.querySelector(`.not-important[data-card="${m}"]`).getAttribute("data-item");rt(),setTimeout((()=>at(f)),1500);const v=document.querySelector(`.not-important[data-card="${m}"]`),h=v.querySelector(".check-icon"),p=v.querySelector(".task-status label");h.style.display="block",p.style.animation="none",p.style.borderColor="#5cb85c",v.classList.add("animate-it"),v.style.pointerEvents="none";const y=k[m],g=k[m].project;if("none"!==g){const w=g.replace(/\s/g,"");for(let S=0;S<O.length;S++)if(O[S].title.replace(/\s/g,"")===w){ct(S);break}}N.push(y),k.splice(m,1),$.classList.contains("details")&&(document.querySelector(".details-info-status-text p").textContent="Completed task"),setTimeout(lt,2400),Le(),xe()}else if(o.includes("important-round")){Ze(),s&&(i.pause(),i.currentTime=0),i.play(),s=!0;const b=n.getAttribute("data-card"),T=document.querySelector(`.important-task[data-card="${b}"]`).getAttribute("data-item");rt(),setTimeout((()=>at(T)),1500);const C=document.querySelector(`.important-task[data-card="${b}"]`),q=C.querySelector(".task-status label");C.querySelector(".check-icon").style.display="block",q.style.animation="none",q.style.borderColor="#5cb85c",C.classList.add("animate-it"),C.style.pointerEvents="none";const x=E[b];N.push(x),E.splice(b,1),setTimeout(lt,2400),Le(),xe(),setTimeout(Be,1e3)}if(!a.includes("fa-star")||a.includes("important-task")||a.includes("completed-task")){if(a.includes("fa-star")&&a.includes("important-task")&&!a.includes("completed-task")){rt();const L=n.getAttribute("data-card"),D=document.querySelector(`.important-task[data-card="${L}"]`).getAttribute("data-item"),A=E[L];A.importance="not-important";const Y=B.querySelectorAll(".important-task"),I=document.querySelector(`.important-task[data-card="${L}"]`);function j(){I.classList.remove("important-task"),I.classList.add("not-important")}function H(){Y[L].classList.remove("important-task"),Y[L].classList.add("not-important")}if($.classList.contains("details")&&(document.querySelector(".details-info-importance-text p").textContent="Not important task"),"All Entries"===ce.textContent||"Important Tasks"===ce.textContent||"All Notes"===ce.textContent?(setTimeout(H,1e3),Y[L].querySelector(".fa-star").style.color="white"):(setTimeout(j,1e3),I.querySelector(".fa-star").style.color="white"),function(e){const t=document.querySelectorAll(".item"),n=[];for(let r=0;r<t.length;r++){const t=document.querySelector(`[data-item="${r}"]`);r>e&&(t.classList.contains("note")||n.push(r))}const r=document.querySelector(".task").clientHeight;let a=n.length*r+6*n.length;window.innerWidth<=1200&&(a=n.length*r+5*n.length),window.innerWidth<=500&&(a=n.length*r+11*n.length);const o=document.querySelector(`[data-item="${e}"]`);o.style.transform=`translateY(${a}px)`,setTimeout((()=>{o.style.transform="translateY(0)"}),1500);for(let n=0;n<t.length;n++)n>e&&!t[n].classList.contains("note")&&(t[n].classList.add("animate-up"),setTimeout((()=>{t[n].classList.remove("animate-up")}),1500))}(D),k.push(A),E.splice(L,1),"All Entries"===ce.textContent)setTimeout($e,1e3);else if("Important Tasks"===ce.textContent)setTimeout(Ge,1e3);else if("All Notes"===ce.textContent)setTimeout(_e,1e3);else if("Today's Tasks"===ce.textContent)Oe(),setTimeout((()=>{B.innerHTML="",Me(),De()}),1e3);else if("Week's Tasks"===ce.textContent)Oe(),setTimeout((()=>{B.innerHTML="",Ne(),Ee()}),1e3);else{setTimeout((()=>{ze(),B.innerHTML=""}),1e3);const U=ce.textContent.replace(/[ .]/g,"");setTimeout((()=>{Xe(U)}),1e3)}Le(),setTimeout(Be,1e3)}}else{rt();const F=n.getAttribute("data-card"),W=document.querySelector(`.not-important[data-card="${F}"]`).getAttribute("data-item"),P=k[F];P.importance="important";const R=B.querySelectorAll(".not-important"),Q=document.querySelector(`.not-important[data-card="${F}"]`);function X(){Q.classList.remove("not-important"),Q.classList.add("important-task")}function J(){R[F].classList.remove("not-important"),R[F].classList.add("important-task")}if($.classList.contains("details")&&(document.querySelector(".details-info-importance-text p").textContent="Important task"),"All Entries"===ce.textContent||"Important Tasks"===ce.textContent||"All Notes"===ce.textContent?(R[F].querySelector(".fa-star").style.color="yellow",setTimeout(J,1e3)):(Q.querySelector(".fa-star").style.color="yellow",setTimeout(X,1e3)),function(e){const t=document.querySelectorAll(".item"),n=[];for(let r=0;r<t.length;r++)r<e&&document.querySelector(`[data-item="${r}"]`).classList.contains("not-important")&&n.push(r);const r=document.querySelector(".task").clientHeight;let a=n.length*r+6*n.length;window.innerWidth<=1200&&(a=n.length*r+5*n.length),window.innerWidth<=500&&(a=n.length*r+11*n.length);const o=document.querySelector(`[data-item="${e}"]`);o.style.transform=`translateY(-${a}px)`,setTimeout((()=>{o.style.transform="translateY(0)"}),1500);for(let n=0;n<t.length;n++)n<e&&document.querySelector(`[data-item="${n}"]`).classList.contains("not-important")&&(t[n].classList.add("animate-down"),setTimeout((()=>{t[n].classList.remove("animate-down")}),1500))}(W),E.push(P),k.splice(F,1),"All Entries"===ce.textContent)setTimeout($e,1e3);else if("Important Tasks"===ce.textContent)setTimeout(Ge,1e3);else if("All Notes"===ce.textContent)setTimeout(_e,1e3);else if("Today's Tasks"===ce.textContent)Oe(),setTimeout((()=>{B.innerHTML="",Me(),De()}),1e3);else if("Week's Tasks"===ce.textContent)Oe(),setTimeout((()=>{B.innerHTML="",Ne(),Ee()}),1e3);else{setTimeout((()=>{ze(),B.innerHTML=""}),1e3);const z=ce.textContent.replace(/[ .]/g,"");setTimeout((()=>{Xe(z)}),1e3)}Le(),setTimeout(Be,1e3)}if(a.includes("task")&&a.includes("not-important")&&!a.includes("fa-star")&&!a.includes("round")){const G=document.querySelector(".task-details");$.classList.add("details"),G.classList.add("active-task-details"),document.querySelector(".mobile-adder").style.display="none";const _=n.getAttribute("data-card"),V=document.querySelector(".details-info-heading-text h2"),Z=document.querySelector(".details-info-details-text p"),K=document.querySelector(".details-list p"),ee=document.querySelector(".details-info-date-number p"),te=document.querySelector(".details-info-importance-text p"),ne=document.querySelector(".details-info-status-text p");document.querySelector(".details-info-date").style.display="grid",document.querySelector(".details-info-importance").style.display="grid",document.querySelector(".details-info-status").style.display="grid",V.textContent=k[_].title,Z.textContent=k[_].details,ee.textContent=k[_].date,te.textContent="Not important task",ne.textContent="Not done yet","none"===k[_].project?K.textContent="All Entries":K.textContent=k[_].project,""===k[_].details&&(Z.textContent="This task has no description"),""===k[_].date&&(ee.textContent="The date has not been set")}else if(a.includes("task")&&a.includes("important-task")&&!a.includes("fa-star")&&!a.includes("round")){const re=document.querySelector(".task-details");$.classList.add("details"),re.classList.add("active-task-details"),document.querySelector(".mobile-adder").style.display="none";const ae=n.getAttribute("data-card"),oe=document.querySelector(".details-info-heading-text h2"),ie=document.querySelector(".details-info-details-text p"),se=document.querySelector(".details-list p"),le=document.querySelector(".details-info-date-number p"),ue=document.querySelector(".details-info-importance-text p"),de=document.querySelector(".details-info-status-text p");document.querySelector(".details-info-date").style.display="grid",document.querySelector(".details-info-importance").style.display="grid",document.querySelector(".details-info-status").style.display="grid",oe.textContent=E[ae].title,ie.textContent=E[ae].details,le.textContent=E[ae].date,ue.textContent="Important task",de.textContent="Not done yet",""===E[ae].date&&(le.textContent="The date has not been set"),""===E[ae].details&&(ie.textContent="This task has no description"),"none"===E[ae].project?se.textContent="All Entries":se.textContent=E[ae].project}else if(a.includes("task")&&a.includes("completed-task")&&!a.includes("fa-star")&&!a.includes("round")){const me=document.querySelector(".task-details");$.classList.add("details"),me.classList.add("active-task-details"),document.querySelector(".mobile-adder").style.display="none";const fe=n.getAttribute("data-card"),ve=document.querySelector(".details-info-heading-text h2"),he=document.querySelector(".details-info-details-text p"),pe=document.querySelector(".details-list p"),ye=document.querySelector(".details-info-date-number p"),ge=document.querySelector(".details-info-importance-text p"),we=document.querySelector(".details-info-status-text p");document.querySelector(".details-info-date").style.display="grid",document.querySelector(".details-info-importance").style.display="grid",document.querySelector(".details-info-status").style.display="grid",ve.textContent=N[fe].title,he.textContent=N[fe].details,ye.textContent=N[fe].date,we.textContent="Completed task","important"===N[fe].importance?ge.textContent="Important task":ge.textContent="Not important task",""===N[fe].date&&(ye.textContent="The date has not been set"),""===N[fe].details&&(he.textContent="This task has no description"),"none"===N[fe].project?pe.textContent="All Entries":pe.textContent=N[fe].project}else if(a.includes("note")){const ke=document.querySelector(".task-details");$.classList.add("details"),ke.classList.add("active-task-details"),document.querySelector(".mobile-adder").style.display="none";const Se=n.getAttribute("data-card"),be=document.querySelector(".details-info-heading-text h2"),Te=document.querySelector(".details-info-details-text p"),Ce=document.querySelector(".details-list p"),qe=document.querySelector(".details-info-date"),Ae=document.querySelector(".details-info-importance"),Ye=document.querySelector(".details-info-status");Ce.textContent="Notes",be.textContent=M[Se].title,Te.textContent=M[Se].details,qe.style.display="none",Ye.style.display="none",Ae.style.display="none",""===M[Se].details&&(Te.textContent="This note has no description")}const l=e.target;if(e.stopImmediatePropagation(),e.stopPropagation(),l.classList.contains("project-list")){Dt();const Ie=l.querySelector("h2").textContent;ce.textContent=Ie,B.innerHTML="",Xe(Ie.replace(/[ .]/g,"")),Ze()}})),document.querySelector(".details-xmark").addEventListener("click",(()=>{Ze()})),document.querySelector(".project-setter-title-input textarea").addEventListener("keydown",(e=>{13===e.keyCode&&e.preventDefault()})),document.querySelector(".task-trash").addEventListener("click",(()=>{const e=document.querySelector(".details-info-importance-text p").textContent,t=document.querySelector(".details-info-heading-text h2").textContent;let n=document.querySelector(".details-info-status-text p").textContent;"Notes"===document.querySelector(".details-list p").textContent&&(n="");const r=t;if("Not done yet"===n){if("Not important task"===e){for(let e=0;e<k.length;e++)if(k[e].title===r){const t=k[e].title,n=S.indexOf(t);S.splice(n,1),k.splice(e,1);break}}else for(let e=0;e<E.length;e++)if(E[e].title===r){const t=E[e].title,n=S.indexOf(t);S.splice(n,1),E.splice(e,1);break}}else if(""===n){for(let e=0;e<M.length;e++)if(M[e].title===r){const t=M[e].title,n=T.indexOf(t);T.splice(n,1),M.splice(e,1);break}}else for(let e=0;e<N.length;e++)if(N[e].title===r){const t=N[e].title,n=S.indexOf(t);S.splice(n,1),N.splice(e,1);break}const a=document.querySelector(".details-list p").textContent,o=document.querySelector(".details-info-status-text p").textContent;if("All Entries"!==a){const e=a.replace(/\s/g,"");for(let t=0;t<O.length;t++)if(O[t].title.replace(/\s/g,"")===e&&"Not done yet"===o){ct(t);break}}Oe(),lt(),Ze(),xe()}));const ut=document.querySelector(".list-trash"),dt=document.querySelector(".project-deleter"),mt=document.querySelector("body"),ft=document.querySelector(".deleter-xmark");ut.addEventListener("click",(()=>{Ze(),dt.classList.add("active-project-deleter"),$.style.display="none",mt.style.overflow="visible"})),ft.addEventListener("click",(()=>{dt.classList.remove("active-project-deleter"),$.style.display="grid"}));const vt=document.getElementById("normal_search"),ht=document.querySelector(".options"),pt=document.querySelector(".projects");vt.addEventListener("input",(()=>{const e=vt.value.trim().toLowerCase(),t=ht.getElementsByTagName("h2"),n=pt.getElementsByTagName("h2");Array.from(t).forEach((e=>{e.innerHTML=e.innerText})),Array.from(n).forEach((e=>{e.innerHTML=e.innerText})),e&&(Array.from(t).forEach((t=>{const n=new RegExp(`(${e})`,"gi");t.innerHTML=t.innerHTML.replace(n,'<span class="highlight">$1</span>')})),Array.from(n).forEach((t=>{const n=new RegExp(`(${e})`,"gi");t.innerHTML=t.innerHTML.replace(n,'<span class="highlight">$1</span>')})))}));const yt=document.getElementById("search_phone"),gt=document.querySelector(".todos");yt.addEventListener("input",(()=>{const e=yt.value.trim().toLowerCase(),t=gt.getElementsByTagName("h2");Array.from(t).forEach((e=>{e.innerHTML=e.innerText})),e&&Array.from(t).forEach((t=>{const n=new RegExp(`(${e})`,"gi");t.innerHTML=t.innerHTML.replace(n,'<span class="highlight">$1</span>')}))}));const wt=document.querySelector(".all-remove"),kt=document.querySelector(".custom-alert-all"),St=document.querySelector(".cancel-all"),bt=document.querySelector(".remove-all");wt.addEventListener("click",(()=>{kt.classList.add("visible-error"),$.style.overflow="hidden",$.style.filter="brightness(0.5)",$.style.pointerEvents="none",new Audio("audio/wrong-message.mp3").play(),xe()})),St.addEventListener("click",(()=>{$.style.overflow="visible",$.style.filter="brightness(1)",$.style.pointerEvents="all",kt.classList.remove("visible-error")})),bt.addEventListener("click",(()=>{k=[],S=[],b=[],T=[],C=[],q=[],x=[],L=[],D=[],E=[],M=[],N=[],O=[],A=[],Y=[],I=[],j=[],H=[],U=[],F=[],W=[],P=[],R=[],Je(),Oe(),$e(),$.style.overflow="visible",$.style.filter="brightness(1)",$.style.pointerEvents="all",kt.classList.remove("visible-error"),xe()}));const Tt=document.querySelector(".swapper-all"),Ct=document.querySelector(".swapper-today"),qt=document.querySelector("#btn");function xt(){qt.style.borderRadius="0 4px 4px 0",qt.style.opacity="1",qt.style.left="121px"}function Lt(){qt.style.opacity="1",qt.style.left="3px",qt.style.borderRadius="4px 0 0 4px"}function Dt(){qt.style.opacity="0",qt.style.left="3px",qt.style.right="auto"}Tt.addEventListener("click",(()=>{Lt(),$e(),Ze()})),Ct.addEventListener("click",(()=>{xt(),B.innerHTML="",Ze(),Oe(),Me(),De(),ce.textContent="Today's Tasks"}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,